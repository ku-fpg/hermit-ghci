[1 of 1] Compiling MapFusion        ( MapFusion.hs, MapFusion.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
module MapFusion where map ∷ ∀ a b . (a → b) → [a] → [b]
[1 of 1] Compiling MapFusionScript  ( MapFusionScript.hs, interpreted )
Ok, modules loaded: MapFusionScript.
map-fusion (Not Proven)
  ∀ △ △ △ f g.
  (.) ▲ ▲ ▲ (map ▲ ▲ f) (map ▲ ▲ g) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g)
Goal:
  ∀ △ △ △ f g.
  (.) ▲ ▲ ▲ (map ▲ ▲ f) (map ▲ ▲ g) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g)
Goal:
  ∀ △ △ △ f g xs.
  (.) ▲ ▲ ▲ (map ▲ ▲ f) (map ▲ ▲ g) xs ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) xs
Goal:
  ∀ △ △ △ f g xs.
  map ▲ ▲ f (map ▲ ▲ g xs) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) xs
Goal:
  ∀ △ △ △ f g.
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  ∀ △ △ △ f g.
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  ∀ △ △ f g.
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  ∀ △ f g.
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  ∀ f g.
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  ∀ g.
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  (map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲))
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
  ≡
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲)
Goal:
  map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
  ≡
  case undefined ▲ of wild ▲
    [] → [] ▲
    (:) a as → (:) ▲ ((.) ▲ ▲ ▲ f g a) (map ▲ ▲ ((.) ▲ ▲ ▲ f g) as)
Goal:
  map ▲ ▲ f (map ▲ ▲ g (undefined ▲)) ≡ undefined ▲
Goal:
  (λ △ △ f ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (f a) (map ▲ ▲ f as)) ▲ ▲ f
                                              ((λ △ △ f ds →
                                                  case ds of wild ▲
                                                    [] → [] ▲
                                                    (:) a as →
                                                      (:) ▲ (f a)
                                                          (map ▲ ▲ f as)) ▲ ▲ g
                                                                          (undefined ▲))
  ≡
  undefined ▲
Goal:
  case undefined ▲ of wild ▲
    [] → [] ▲
    (:) a as → (:) ▲ (f (g a)) (map ▲ ▲ f (map ▲ ▲ g as))
  ≡
  undefined ▲
Goal:
  undefined ▲ ≡ undefined ▲
Goal:
  true
Goal:
  (true)
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  (true)
  ∧
  ((map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  (map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲))
  ∧
  (∀ a b.
   (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
   ⇒
   (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
    ≡
    map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)))
Goal:
  map ▲ ▲ f (map ▲ ▲ g ([] ▲)) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲)
Goal:
  [] ▲ ≡ [] ▲
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
    ⇒
    (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
     ≡
     map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))))
Goal:
  (true)
  ∧
  (∀ a b.
   (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
   ⇒
   (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
    ≡
    map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)))
Goal:
  ∀ a b.
  (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
  ⇒
  (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))
Goal:
  ∀ b.
  (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
  ⇒
  (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))
Goal:
  (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
  ⇒
  (map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
   ≡
   map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b))
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b
Goal:
  map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
  ≡
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ f (map ▲ ▲ g b))
  ≡
  (:) ▲ ((.) ▲ ▲ ▲ f g a) (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ f (map ▲ ▲ g b))
  ≡
  (:) ▲ ((.) ▲ ▲ ▲ f g a) (map ▲ ▲ f (map ▲ ▲ g b))
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ f (map ▲ ▲ g b))
  ≡
  (:) ▲ (f (g a)) (map ▲ ▲ f (map ▲ ▲ g b))
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b) ⇒ (true)))
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b) ⇒ (true)))
Goal:
  ∀ △ △ △ f g.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (map ▲ ▲ g b) ≡ map ▲ ▲ ((.) ▲ ▲ ▲ f g) b) ⇒ (true)))
Successfully proven: map-fusion

module MapFusion where map ∷ ∀ a b . (a → b) → [a] → [b]
HERMIT> Leaving GHCi.
ghc: user interrupt
[starting HERMIT-shell v0.1.0.0 on MapFusion.hs]
[starting HERMIT v1.0.0.0 on MapFusion.hs]
% ghc MapFusion.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:MapFusion: -fplugin-opt=HERMIT.GHCI:MapFusion:MapFusionScript.hs -fplugin-opt=HERMIT.GHCI:MapFusion:resume -w
