[1 of 1] Compiling Main             ( Eval.hs, Eval.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
module Main where
  rep ∷ Mint → (Int → Mint) → Mint → Mint
  abs ∷ ((Int → Mint) → Mint → Mint) → Mint
  $dShow ∷ Show (Maybe Int)
  eval ∷ Expr → Mint
  main ∷ IO ()
  main ∷ IO ()
[1 of 2] Compiling WWAssAScript     ( WWAssAScript.hs, interpreted )
[2 of 2] Compiling EvalScript       ( EvalScript.hs, interpreted )
Ok, modules loaded: EvalScript, WWAssAScript.
module Main where
  rep ∷ Mint → (Int → Mint) → Mint → Mint
  abs ∷ ((Int → Mint) → Mint → Mint) → Mint
  $dShow ∷ Show (Maybe Int)
  eval ∷ Expr → Mint
  main ∷ IO ()
  main ∷ IO ()
eval = λ ds →
  case ds of wild ▲
    Val n → Just ▲ n
    Add x y →
      case eval x of wild ▲
        Nothing → Nothing ▲
        Just m →
          case eval y of wild ▲
            Nothing → Nothing ▲
            Just n → Just ▲ ((+) ▲ $fNumInt m n)
    Throw → Nothing ▲
    Catch x y →
      case eval x of wild ▲
        Nothing → eval y
        Just n → Just ▲ n
eval =
  let f = λ eval ds →
        case ds of wild ▲
          Val n → Just ▲ n
          Add x y →
            case eval x of wild ▲
              Nothing → Nothing ▲
              Just m →
                case eval y of wild ▲
                  Nothing → Nothing ▲
                  Just n → Just ▲ ((+) ▲ $fNumInt m n)
          Throw → Nothing ▲
          Catch x y →
            case eval x of wild ▲
              Nothing → eval y
              Just n → Just ▲ n
      rec work = λ x1 → rep (f (λ x2 → abs (work x2)) x1)
  in λ x0 → abs (work x0)
eval =
  let f = λ eval ds →
        case ds of wild ▲
          Val n → Just ▲ n
          Add x y →
            case eval x of wild ▲
              Nothing → Nothing ▲
              Just m →
                case eval y of wild ▲
                  Nothing → Nothing ▲
                  Just n → Just ▲ ((+) ▲ $fNumInt m n)
          Throw → Nothing ▲
          Catch x y →
            case eval x of wild ▲
              Nothing → eval y
              Just n → Just ▲ n
      rec work = λ x1 → rep (f (λ x2 → abs (work x2)) x1)
  in λ x0 → abs (work x0)
let f = λ eval ds →
      case ds of wild ▲
        Val n → Just ▲ n
        Add x y →
          case eval x of wild ▲
            Nothing → Nothing ▲
            Just m →
              case eval y of wild ▲
                Nothing → Nothing ▲
                Just n → Just ▲ ((+) ▲ $fNumInt m n)
        Throw → Nothing ▲
        Catch x y →
          case eval x of wild ▲
            Nothing → eval y
            Just n → Just ▲ n
    rec work = λ x1 → rep (f (λ x2 → abs (work x2)) x1)
in λ x0 → abs (work x0)
let rec work = λ x1 →
          rep ((λ eval ds →
                  case ds of wild ▲
                    Val n → Just ▲ n
                    Add x y →
                      case eval x of wild ▲
                        Nothing → Nothing ▲
                        Just m →
                          case eval y of wild ▲
                            Nothing → Nothing ▲
                            Just n → Just ▲ ((+) ▲ $fNumInt m n)
                    Throw → Nothing ▲
                    Catch x y →
                      case eval x of wild ▲
                        Nothing → eval y
                        Just n → Just ▲ n) (λ x2 → abs (work x2)) x1)
in λ x0 → abs (work x0)
let rec work = λ x1 →
          rep ((λ eval ds →
                  case ds of wild ▲
                    Val n → Just ▲ n
                    Add x y →
                      case eval x of wild ▲
                        Nothing → Nothing ▲
                        Just m →
                          case eval y of wild ▲
                            Nothing → Nothing ▲
                            Just n → Just ▲ ((+) ▲ $fNumInt m n)
                    Throw → Nothing ▲
                    Catch x y →
                      case eval x of wild ▲
                        Nothing → eval y
                        Just n → Just ▲ n) (λ x2 → abs (work x2)) x1)
in λ x0 → abs (work x0)
λ x0 → abs (work x0)
λ e → abs (work e)
abs (work e)
work e (Just ▲) (Nothing ▲)
let rec work = λ x1 →
          rep ((λ eval ds →
                  case ds of wild ▲
                    Val n → Just ▲ n
                    Add x y →
                      case eval x of wild ▲
                        Nothing → Nothing ▲
                        Just m →
                          case eval y of wild ▲
                            Nothing → Nothing ▲
                            Just n → Just ▲ ((+) ▲ $fNumInt m n)
                    Throw → Nothing ▲
                    Catch x y →
                      case eval x of wild ▲
                        Nothing → eval y
                        Just n → Just ▲ n) (λ x2 → abs (work x2)) x1)
in λ e → work e (Just ▲) (Nothing ▲)
let rec work = λ x1 →
          rep ((λ eval ds →
                  case ds of wild ▲
                    Val n → Just ▲ n
                    Add x y →
                      case eval x of wild ▲
                        Nothing → Nothing ▲
                        Just m →
                          case eval y of wild ▲
                            Nothing → Nothing ▲
                            Just n → Just ▲ ((+) ▲ $fNumInt m n)
                    Throw → Nothing ▲
                    Catch x y →
                      case eval x of wild ▲
                        Nothing → eval y
                        Just n → Just ▲ n) (λ x2 → abs (work x2)) x1)
in λ e → work e (Just ▲) (Nothing ▲)
λ x1 →
  rep ((λ eval ds →
          case ds of wild ▲
            Val n → Just ▲ n
            Add x y →
              case eval x of wild ▲
                Nothing → Nothing ▲
                Just m →
                  case eval y of wild ▲
                    Nothing → Nothing ▲
                    Just n → Just ▲ ((+) ▲ $fNumInt m n)
            Throw → Nothing ▲
            Catch x y →
              case eval x of wild ▲
                Nothing → eval y
                Just n → Just ▲ n) (λ x2 → abs (work x2)) x1)
λ e →
  rep ((λ eval ds →
          case ds of wild ▲
            Val n → Just ▲ n
            Add x y →
              case eval x of wild ▲
                Nothing → Nothing ▲
                Just m →
                  case eval y of wild ▲
                    Nothing → Nothing ▲
                    Just n → Just ▲ ((+) ▲ $fNumInt m n)
            Throw → Nothing ▲
            Catch x y →
              case eval x of wild ▲
                Nothing → eval y
                Just n → Just ▲ n) (λ x2 → abs (work x2)) e)
rep ((λ eval ds →
        case ds of wild ▲
          Val n → Just ▲ n
          Add x y →
            case eval x of wild ▲
              Nothing → Nothing ▲
              Just m →
                case eval y of wild ▲
                  Nothing → Nothing ▲
                  Just n → Just ▲ ((+) ▲ $fNumInt m n)
          Throw → Nothing ▲
          Catch x y →
            case eval x of wild ▲
              Nothing → eval y
              Just n → Just ▲ n) (λ x2 → abs (work x2)) e)
λ s f →
  case (λ eval ds →
          case ds of wild ▲
            Val n → Just ▲ n
            Add x y →
              case eval x of wild ▲
                Nothing → Nothing ▲
                Just m →
                  case eval y of wild ▲
                    Nothing → Nothing ▲
                    Just n → Just ▲ ((+) ▲ $fNumInt m n)
            Throw → Nothing ▲
            Catch x y →
              case eval x of wild ▲
                Nothing → eval y
                Just n → Just ▲ n) (λ x2 → abs (work x2)) e
   of wild ▲
    Nothing → f
    Just n → s n
λ s f →
  case e of wild ▲
    Val n → s n
    Add x y →
      case abs (work x) of wild ▲
        Nothing → f
        Just m →
          case abs (work y) of wild ▲
            Nothing → f
            Just n → s ((+) ▲ $fNumInt m n)
    Throw → f
    Catch x y →
      case abs (work x) of wild ▲
        Nothing →
          case abs (work y) of wild ▲
            Nothing → f
            Just n → s n
        Just n → s n
λ f →
  case e of wild ▲
    Val n → s n
    Add x y →
      case abs (work x) of wild ▲
        Nothing → f
        Just m →
          case abs (work y) of wild ▲
            Nothing → f
            Just n → s ((+) ▲ $fNumInt m n)
    Throw → f
    Catch x y →
      case abs (work x) of wild ▲
        Nothing →
          case abs (work y) of wild ▲
            Nothing → f
            Just n → s n
        Just n → s n
case e of wild ▲
  Val n → s n
  Add x y →
    case abs (work x) of wild ▲
      Nothing → f
      Just m →
        case abs (work y) of wild ▲
          Nothing → f
          Just n → s ((+) ▲ $fNumInt m n)
  Throw → f
  Catch x y →
    case abs (work x) of wild ▲
      Nothing →
        case abs (work y) of wild ▲
          Nothing → f
          Just n → s n
      Just n → s n
case e of wild ▲
  Val n → s n
  Add x y →
    case abs (work x) of wild ▲
      Nothing → f
      Just m →
        case abs (work y) of wild ▲
          Nothing → f
          Just n → s ((+) ▲ $fNumInt m n)
  Throw → f
  Catch x y →
    case abs (work x) of wild ▲
      Nothing →
        case abs (work y) of wild ▲
          Nothing → f
          Just n → s n
      Just n → s n
case abs (work x) of wild ▲
  Nothing → f
  Just m →
    case abs (work y) of wild ▲
      Nothing → f
      Just n → s ((+) ▲ $fNumInt m n)
Just m →
  case abs (work y) of wild ▲
    Nothing → f
    Just n → s ((+) ▲ $fNumInt m n)
case abs (work y) of wild ▲
  Nothing → f
  Just n → s ((+) ▲ $fNumInt m n)
(λ m →
   case abs (work y) of wild ▲
     Nothing → f
     Just n → s ((+) ▲ $fNumInt m n)) m
case abs (work y) of wild ▲
  Nothing → f
  Just n → s ((+) ▲ $fNumInt m n)
Just n → s ((+) ▲ $fNumInt m n)
s ((+) ▲ $fNumInt m n)
(λ n → s ((+) ▲ $fNumInt m n)) n
case e of wild ▲
  Val n → s n
  Add x y →
    case abs (work x) of wild ▲
      Nothing → f
      Just m →
        (λ m →
           case abs (work y) of wild ▲
             Nothing → f
             Just n → (λ n → s ((+) ▲ $fNumInt m n)) n) m
  Throw → f
  Catch x y →
    case abs (work x) of wild ▲
      Nothing →
        case abs (work y) of wild ▲
          Nothing → f
          Just n → s n
      Just n → s n
case e of wild ▲
  Val n → s n
  Add x y →
    rep (abs (work x))
        (λ m → rep (abs (work y)) (λ n → s ((+) ▲ $fNumInt m n)) f) f
  Throw → f
  Catch x y → rep (abs (work x)) s (rep (abs (work y)) s f)
case e of wild ▲
  Val n → s n
  Add x y → work x (λ m → work y (λ n → s ((+) ▲ $fNumInt m n)) f) f
  Throw → f
  Catch x y → work x s (work y s f)
let rec work = λ e s f →
          case e of wild ▲
            Val n → s n
            Add x y → work x (λ m → work y (λ n → s ((+) ▲ $fNumInt m n)) f) f
            Throw → f
            Catch x y → work x s (work y s f)
in λ e → work e (Just ▲) (Nothing ▲)
eval =
  let rec work = λ e s f →
            case e of wild ▲
              Val n → s n
              Add x y → work x (λ m → work y (λ n → s ((+) ▲ $fNumInt m n)) f) f
              Throw → f
              Catch x y → work x s (work y s f)
  in λ e → work e (Just ▲) (Nothing ▲)
HERMIT> Leaving GHCi.
ghc: user interrupt
Linking Eval ...
[starting HERMIT-shell v0.1.0.0 on Eval.hs]
[starting HERMIT v1.0.0.0 on Eval.hs]
% ghc Eval.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:Main: -fplugin-opt=HERMIT.GHCI:Main:EvalScript.hs -fplugin-opt=HERMIT.GHCI:Main:resume -w
