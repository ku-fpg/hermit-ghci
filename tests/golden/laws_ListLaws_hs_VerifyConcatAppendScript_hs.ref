[1 of 1] Compiling ListLaws         ( ListLaws.hs, ListLaws.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[1 of 3] Compiling VerifyNilAppendScript ( VerifyNilAppendScript.hs, interpreted )
[2 of 3] Compiling VerifyAppendAssocScript ( VerifyAppendAssocScript.hs, interpreted )
[3 of 3] Compiling VerifyConcatAppendScript ( VerifyConcatAppendScript.hs, interpreted )
Ok, modules loaded: VerifyConcatAppendScript, VerifyAppendAssocScript, VerifyNilAppendScript.
append-assoc (Not Proven)
  ∀ △ x y z. (++) ▲ x ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ x y) z
nil-append (Not Proven)
  ∀ △ xs. (++) ▲ ([] ▲) xs ≡ xs
Goal:
  ∀ △ xs. (++) ▲ ([] ▲) xs ≡ xs
Goal:
  ∀ △ xs.
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ([] ▲) xs
  ≡
  xs
Goal:
  true
Successfully proven: nil-append

module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
Goal:
  ∀ △ x y z. (++) ▲ x ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ x y) z
Goal:
  ∀ △ y z.
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  ∀ △ y z.
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  ∀ y z.
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  ∀ z.
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  (++) ▲ (undefined ▲) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ (undefined ▲) y) z
Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ (undefined ▲) ((++) ▲ y z)
  ≡
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((++) ▲ (undefined ▲) y) z
Goal:
  undefined ▲
  ≡
  case (++) ▲ (undefined ▲) y of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
Goal:
  undefined ▲
  ≡
  case (λ △ ds ys →
          case ds of wild ▲
            [] → ys
            (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ (undefined ▲) y
   of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
Goal:
  true
Goal:
  (true)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  (true)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  ((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
  ∧
  (∀ a b.
   ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
   ⇒
   ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
    ≡
    (++) ▲ ((++) ▲ ((:) ▲ a b) y) z))
Goal:
  (++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z
Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ([] ▲) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ ([] ▲) y) z
Goal:
  (++) ▲ y z ≡ (++) ▲ ((++) ▲ ([] ▲) y) z
Goal:
  (++) ▲ y z ≡ (++) ▲ y z
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
Goal:
  (true)
  ∧
  (∀ a b.
   ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
   ⇒
   ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
    ≡
    (++) ▲ ((++) ▲ ((:) ▲ a b) y) z))
Goal:
  ∀ a b.
  ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
  ⇒
  ((++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)
Goal:
  ∀ b.
  ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
  ⇒
  ((++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)
Goal:
  ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
  ⇒
  ((++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((:) ▲ a b) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ b ((++) ▲ y z)) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((++) ▲ ((:) ▲ a b) y) z
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  case (++) ▲ ((:) ▲ a b) y of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  case (λ △ ds ys →
          case ds of wild ▲
            [] → ys
            (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((:) ▲ a b) y
   of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z)
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z) ≡ (:) ▲ a ((++) ▲ ((++) ▲ b y) z)
Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b. ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z) ⇒ (true)))
Goal:
  ∀ △ y z.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b. ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z) ⇒ (true)))
Goal:
  true
Successfully proven: append-assoc

module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
concat-append (Not Proven)
  ∀ △ x y. concat ▲ ((++) ▲ x y) ≡ (++) ▲ (concat ▲ x) (concat ▲ y)
Goal:
  ∀ △ x y. concat ▲ ((++) ▲ x y) ≡ (++) ▲ (concat ▲ x) (concat ▲ y)
Goal:
  ∀ △ y.
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  ∀ △ y.
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  ∀ y.
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  concat ▲ ((++) ▲ (undefined ▲) y)
  ≡
  (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y)
Goal:
  undefined ▲
  ≡
  case concat ▲ (undefined ▲) of wild ▲
    [] → concat ▲ y
    (:) x xs → (:) ▲ x ((++) ▲ xs (concat ▲ y))
Goal:
  undefined ▲
  ≡
  case case undefined ▲ of wild ▲
         [] → [] ▲
         (:) x xs → (++) ▲ x (concat ▲ xs)
   of wild ▲
    [] → concat ▲ y
    (:) x xs → (:) ▲ x ((++) ▲ xs (concat ▲ y))
Goal:
  true
Goal:
  (true)
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  (true)
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  (concat ▲ ((++) ▲ ([] ▲) y)
   ≡
   (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
  ∧
  (∀ a b.
   (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
   ⇒
   (concat ▲ ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)))
Goal:
  concat ▲ ((++) ▲ ([] ▲) y) ≡ (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y)
Goal:
  concat ▲ y ≡ (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y)
Goal:
  concat ▲ y ≡ concat ▲ y
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
Goal:
  (true)
  ∧
  (∀ a b.
   (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
   ⇒
   (concat ▲ ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)))
Goal:
  ∀ a b.
  (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
  ⇒
  (concat ▲ ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))
Goal:
  ∀ b.
  (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
  ⇒
  (concat ▲ ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))
Goal:
  (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
  ⇒
  (concat ▲ ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))
Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  concat ▲ ((++) ▲ ((:) ▲ a b) y)
  ≡
  (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)
Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  (++) ▲ a ((++) ▲ (concat ▲ b) (concat ▲ y))
  ≡
  (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)
Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  (++) ▲ a ((++) ▲ (concat ▲ b) (concat ▲ y))
  ≡
  (++) ▲ a ((++) ▲ (concat ▲ b) (concat ▲ y))
Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (true)))
Goal:
  ∀ △ y.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (true)))
Successfully proven: concat-append

module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
HERMIT> Leaving GHCi.
ghc: user interrupt
[starting HERMIT-shell v0.1.0.0 on ListLaws.hs]
[starting HERMIT v1.0.0.0 on ListLaws.hs]
% ghc ListLaws.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:ListLaws: -fplugin-opt=HERMIT.GHCI:ListLaws:VerifyConcatAppendScript.hs -fplugin-opt=HERMIT.GHCI:ListLaws:resume -w
