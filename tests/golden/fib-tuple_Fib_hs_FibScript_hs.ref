[1 of 2] Compiling WWAssAScript     ( WWAssAScript.hs, nothing )
[2 of 2] Compiling FibScript        ( FibScript.hs, nothing )
[1 of 1] Compiling Main             ( Fib.hs, Fib.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.1: http://www.haskell.org/ghc/  :? for help
module Main where
  unwrap ∷ (Nat → Nat) → Nat → (Nat, Nat)
  wrap ∷ (Nat → (Nat, Nat)) → Nat → Nat
  (+) ∷ Nat → Nat → Nat
  fib ∷ Nat → Nat
  fromInt ∷ Int → Nat
  toInt ∷ Nat → Int
  main ∷ IO ()
  main ∷ IO ()
[Done]

[1 of 2] Compiling WWAssAScript     ( WWAssAScript.hs, interpreted )
[2 of 2] Compiling FibScript        ( FibScript.hs, interpreted )
Ok, modules loaded: FibScript, WWAssAScript.
module Main where
  unwrap ∷ (Nat → Nat) → Nat → (Nat, Nat)
  wrap ∷ (Nat → (Nat, Nat)) → Nat → Nat
  (+) ∷ Nat → Nat → Nat
  fib ∷ Nat → Nat
  fromInt ∷ Int → Nat
  toInt ∷ Nat → Int
  main ∷ IO ()
  main ∷ IO ()
[Done]

fib = λ ds →
  case ds of wild ▲
    Z → Z
    S ds →
      case ds of wild ▲
        Z → S Z
        S n → (+) (fib (S n)) (fib n)
[Done]

fib = λ ds →
  case ds of wild ▲
    Z → Z
    S ds →
      case ds of wild ▲
        Z → S Z
        S n → (+) (fib (S n)) (fib n)
[Done]

fib =
  let f = λ fib ds →
        case ds of wild ▲
          Z → Z
          S ds →
            case ds of wild ▲
              Z → S Z
              S n → (+) (fib (S n)) (fib n)
      rec work = unwrap (f (wrap work))
  in wrap work
[Done]

work = unwrap (f (wrap work))
[Done]

'"Object (fromList [(\"params\",Array (fromList [Object (fromList [(\"params\",Array (fromList [String \"origwork\"])),(\"method\",String \"remember\")])])),(\"method\",String \"query\")])" [correct]

[Done]

unwrap (f (wrap work))
[Done]

λ n → unwrap (f (wrap work)) n
[Done]

λ n → (,) ▲ ▲ (f (wrap work) n) (f (wrap work) (S n))
[Done]

(,) ▲ ▲ (f (wrap work) n) (f (wrap work) (S n))
[Done]

case n of w ▲
  Z → (,) ▲ ▲ (f (wrap work) Z) (f (wrap work) (S Z))
  S a → (,) ▲ ▲ (f (wrap work) (S a)) (f (wrap work) (S (S a)))
[Done]

case n of w ▲
  Z → (,) ▲ ▲ (f (wrap work) Z) (f (wrap work) (S Z))
  S a → (,) ▲ ▲ (f (wrap work) (S a)) (f (wrap work) (S (S a)))
[Done]

Z → (,) ▲ ▲ (f (wrap work) Z) (f (wrap work) (S Z))
[Done]

Z →
  (,) ▲ ▲
      (case Z of wild ▲
         Z → Z
         S ds →
           case ds of wild ▲
             Z → S Z
             S n → (+) (wrap work (S n)) (wrap work n))
      (case S Z of wild ▲
         Z → Z
         S ds →
           case ds of wild ▲
             Z → S Z
             S n → (+) (wrap work (S n)) (wrap work n))
[Done]

case n of w ▲
  Z →
    (,) ▲ ▲
        (case Z of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
        (case S Z of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
  S a → (,) ▲ ▲ (f (wrap work) (S a)) (f (wrap work) (S (S a)))
[Done]

case n of w ▲
  Z →
    (,) ▲ ▲
        (case Z of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
        (case S Z of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
  S a → (,) ▲ ▲ (f (wrap work) (S a)) (f (wrap work) (S (S a)))
[Done]

S a → (,) ▲ ▲ (f (wrap work) (S a)) (f (wrap work) (S (S a)))
[Done]

(,) ▲ ▲ (f (wrap work) (S a)) (f (wrap work) (S (S a)))
[Done]

f (wrap work) (S (S a))
[Done]

case S (S a) of wild ▲
  Z → Z
  S ds →
    case ds of wild ▲
      Z → S Z
      S n → (+) (wrap work (S n)) (wrap work n)
[Done]

case n of w ▲
  Z →
    (,) ▲ ▲
        (case Z of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
        (case S Z of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
  S a →
    (,) ▲ ▲ (f (wrap work) (S a))
        (case S (S a) of wild ▲
           Z → Z
           S ds →
             case ds of wild ▲
               Z → S Z
               S n → (+) (wrap work (S n)) (wrap work n))
[Done]

case n of w ▲
  Z → (,) ▲ ▲ Z (S Z)
  S a →
    (,) ▲ ▲ (f (wrap work) (S a)) ((+) (wrap work (S a)) (wrap work a))
[Done]

S a →
  (,) ▲ ▲ (f (wrap work) (S a)) ((+) (wrap work (S a)) (wrap work a))
[Done]

(,) ▲ ▲ (f (wrap work) (S a)) ((+) (wrap work (S a)) (wrap work a))
[Done]

(,) ▲ ▲ (f (wrap work) (S a)) ((+) (wrap work (S a)) (wrap work a))
[Done]

(+) (wrap work (S a)) (wrap work a)
[Done]

(+) (wrap (unwrap (f (wrap work))) (S a))
    (wrap (unwrap (f (wrap work))) a)
[Done]

(,) ▲ ▲ (f (wrap work) (S a))
    ((+) (wrap (unwrap (f (wrap work))) (S a))
         (wrap (unwrap (f (wrap work))) a))
[Done]

(,) ▲ ▲ (f (wrap work) (S a))
    ((+) (f (wrap work) (S a)) (f (wrap work) a))
[Done]

(,) ▲ ▲ (f (wrap work) (S a))
    ((+) (f (wrap work) (S a)) (f (wrap work) a))
[Done]

(+) (f (wrap work) (S a)) (f (wrap work) a)
[Done]

f (wrap work) a
[Done]

let x = f (wrap work) a in x
[Done]

(,) ▲ ▲ (f (wrap work) (S a))
    ((+) (f (wrap work) (S a)) (let x = f (wrap work) a in x))
[Done]

(,) ▲ ▲ (f (wrap work) (S a))
    ((+) (f (wrap work) (S a)) (let x = f (wrap work) a in x))
[Done]

f (wrap work) (S a)
[Done]

let y = f (wrap work) (S a) in y
[Done]

(,) ▲ ▲ (let y = f (wrap work) (S a) in y)
    ((+) (f (wrap work) (S a)) (let x = f (wrap work) a in x))
[Done]

let x = f (wrap work) a
    y = f (wrap work) (S a)
in (,) ▲ ▲ y ((+) (f (wrap work) (S a)) x)
[Done]

let x = f (wrap work) a
    y = f (wrap work) (S a)
in (,) ▲ ▲ y ((+) (f (wrap work) (S a)) x)
[Done]

let x = f (wrap work) a
    y = f (wrap work) (S a)
in (,) ▲ ▲ y ((+) y x)
[Done]

case (,) ▲ ▲ (f (wrap work) a) (f (wrap work) (S a)) of xy ▲
  (,) x y → (,) ▲ ▲ y ((+) y x)
[Done]

case unwrap (f (wrap work)) a of xy ▲
  (,) x y → (,) ▲ ▲ y ((+) y x)
[Done]

case work a of xy ▲
  (,) x y → (,) ▲ ▲ y ((+) y x)
[Done]

fib =
  let f = λ fib ds →
        case ds of wild ▲
          Z → Z
          S ds →
            case ds of wild ▲
              Z → S Z
              S n → (+) (fib (S n)) (fib n)
      rec work = λ n →
            case n of w ▲
              Z → (,) ▲ ▲ Z (S Z)
              S a →
                case work a of xy ▲
                  (,) x y → (,) ▲ ▲ y ((+) y x)
  in wrap work
[Done]

fib =
  let f = λ fib ds →
        case ds of wild ▲
          Z → Z
          S ds →
            case ds of wild ▲
              Z → S Z
              S n → (+) (fib (S n)) (fib n)
      rec work = λ n →
            case n of w ▲
              Z → (,) ▲ ▲ Z (S Z)
              S a →
                case work a of xy ▲
                  (,) x y → (,) ▲ ▲ y ((+) y x)
  in wrap work
[Done]

let f = λ fib ds →
      case ds of wild ▲
        Z → Z
        S ds →
          case ds of wild ▲
            Z → S Z
            S n → (+) (fib (S n)) (fib n)
    rec work = λ n →
          case n of w ▲
            Z → (,) ▲ ▲ Z (S Z)
            S a →
              case work a of xy ▲
                (,) x y → (,) ▲ ▲ y ((+) y x)
in wrap work
[Done]

let rec work = λ n →
          case n of w ▲
            Z → (,) ▲ ▲ Z (S Z)
            S a →
              case work a of xy ▲
                (,) x y → (,) ▲ ▲ y ((+) y x)
in wrap work
[Done]

fib =
  let rec work = λ n →
            case n of w ▲
              Z → (,) ▲ ▲ Z (S Z)
              S a →
                case work a of xy ▲
                  (,) x y → (,) ▲ ▲ y ((+) y x)
  in wrap work
[Done]

fib =
  let rec work = λ n →
            case n of w ▲
              Z → (,) ▲ ▲ Z (S Z)
              S a →
                case work a of xy ▲
                  (,) x y → (,) ▲ ▲ y ((+) y x)
  in λ n → fst ▲ ▲ (work n)
[Done]

HERMIT> 
[Done]

Leaving GHCi.
ghc: user interrupt
Linking Fib ...
[starting HERMIT-shell v0.1.0.0 on Fib.hs]
[starting HERMIT v1.0.0.0 on Fib.hs]
% ghc Fib.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:Main: -fplugin-opt=HERMIT.GHCI:Main:FibScript.hs -fplugin-opt=HERMIT.GHCI:Main:resume
