[1 of 2] Compiling HList            ( HList.hs, HList.o )
[2 of 2] Compiling Main             ( Flatten.hs, Flatten.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help
module Main where
  flatten ∷ ∀ a . Tree a → [a]
  $dShow ∷ Show [Char]
  main ∷ IO ()
  main ∷ IO ()
[1 of 3] Compiling WWAssAScript     ( WWAssAScript.hs, interpreted )
[2 of 3] Compiling StrictRepHScript ( StrictRepHScript.hs, interpreted )
[3 of 3] Compiling FlattenScript    ( FlattenScript.hs, interpreted )
Ok, modules loaded: FlattenScript, StrictRepHScript, WWAssAScript.
flatten = λ △ ds →
  case ds of wild ▲
    Node l r → (++) ▲ (flatten ▲ l) (flatten ▲ r)
    Leaf a → (:) ▲ a ([] ▲)
flatten = λ △ ds →
  (let f = λ flatten' ds →
         case ds of wild ▲
           Node l r → (++) ▲ (flatten' l) (flatten' r)
           Leaf a → (:) ▲ a ([] ▲)
       rec work = λ x1 → repH ▲ (f (λ x2 → absH ▲ (work x2)) x1)
   in λ x0 → absH ▲ (work x0)) ds
flatten = λ △ →
  let rec work = λ x1 →
            repH ▲
                 (case x1 of wild ▲
                    Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
                    Leaf a → (:) ▲ a ([] ▲))
  in λ x0 → absH ▲ (work x0)
flatten = λ △ →
  let rec work = λ x1 →
            repH ▲
                 (case x1 of wild ▲
                    Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
                    Leaf a → (:) ▲ a ([] ▲))
  in λ x0 → absH ▲ (work x0)
λ x1 →
  repH ▲
       (case x1 of wild ▲
          Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
          Leaf a → (:) ▲ a ([] ▲))
λ tree →
  repH ▲
       (case tree of wild ▲
          Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
          Leaf a → (:) ▲ a ([] ▲))
repH ▲
     (case tree of wild ▲
        Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
        Leaf a → (:) ▲ a ([] ▲))
λ acc →
  repH ▲
       (case tree of wild ▲
          Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
          Leaf a → (:) ▲ a ([] ▲))
       acc
repH ▲
     (case tree of wild ▲
        Node l r → (++) ▲ (absH ▲ (work l)) (absH ▲ (work r))
        Leaf a → (:) ▲ a ([] ▲))
     acc
case tree of wild ▲
  Node l r → work l (work r acc)
  Leaf a → (:) ▲ a acc
flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → absH ▲ (work x0)
flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → work x0 ([] ▲)
Goal:
  ∀ △ xs. (++) ▲ xs ([] ▲) ≡ xs
Successfully proven: ++ []

flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → work x0 ([] ▲)
Goal:
  ∀ △. (++) ▲ (undefined ▲) ≡ undefined ▲
Successfully proven: ++ strict

flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → work x0 ([] ▲)
Goal:
  ∀ △ x xs. repH ▲ ((:) ▲ x xs) ≡ (.) ▲ ▲ ▲ ((:) ▲ x) (repH ▲ xs)
Successfully proven: repH (:)

flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → work x0 ([] ▲)
Goal:
  ∀ △ xs ys.
  repH ▲ ((++) ▲ xs ys) ≡ (.) ▲ ▲ ▲ (repH ▲ xs) (repH ▲ ys)
Successfully proven: repH ++

flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → work x0 ([] ▲)
Goal:
  ∀ △. repH ▲ ([] ▲) ≡ id ▲
Successfully proven: repH []

flatten = λ △ →
  let rec work = λ tree acc →
            case tree of wild ▲
              Node l r → work l (work r acc)
              Leaf a → (:) ▲ a acc
  in λ x0 → work x0 ([] ▲)
HERMIT> Warning: Lemma ++ [] was assumed but not proven.

++ []
  ∀ △ xs. (++) ▲ xs ([] ▲) ≡ xs
Warning: Lemma ++ strict was assumed but not proven.

++ strict
  ∀ △. (++) ▲ (undefined ▲) ≡ undefined ▲
Warning: Lemma repH (:) was assumed but not proven.

repH (:)
  ∀ △ x xs. repH ▲ ((:) ▲ x xs) ≡ (.) ▲ ▲ ▲ ((:) ▲ x) (repH ▲ xs)
Warning: Lemma repH ++ was assumed but not proven.

repH ++
  ∀ △ xs ys.
  repH ▲ ((++) ▲ xs ys) ≡ (.) ▲ ▲ ▲ (repH ▲ xs) (repH ▲ ys)
Warning: Lemma repH [] was assumed but not proven.

repH []
  ∀ △. repH ▲ ([] ▲) ≡ id ▲
Leaving GHCi.
ghc: user interrupt
Linking Flatten ...
[starting HERMIT-shell v0.1.0.0 on Flatten.hs]
[starting HERMIT v1.0.0.1 on Flatten.hs]
% ghc Flatten.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:Main: -fplugin-opt=HERMIT.GHCI:Main:FlattenScript.hs -fplugin-opt=HERMIT.GHCI:Main:resume -w
