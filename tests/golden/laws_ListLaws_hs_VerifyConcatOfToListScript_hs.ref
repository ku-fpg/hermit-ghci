[1 of 1] Compiling ListLaws         ( ListLaws.hs, ListLaws.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

[1 of 1] Compiling VerifyConcatOfToListScript ( VerifyConcatOfToListScript.hs, interpreted )
Ok, modules loaded: VerifyConcatOfToListScript.
concat-of-toList (Not Proven)
  ∀ △ xs. concat ▲ (map ▲ ▲ (toList ▲) xs) ≡ xs
[Done]

Goal:
  ∀ △ xs. concat ▲ (map ▲ ▲ (toList ▲) xs) ≡ xs
[Done]

Goal:
  ∀ △.
  (concat ▲ (map ▲ ▲ (toList ▲) (undefined ▲)) ≡ undefined ▲)
  ∧
  ((concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  ∀ △.
  (concat ▲ (map ▲ ▲ (toList ▲) (undefined ▲)) ≡ undefined ▲)
  ∧
  ((concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  (concat ▲ (map ▲ ▲ (toList ▲) (undefined ▲)) ≡ undefined ▲)
  ∧
  ((concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  (concat ▲ (map ▲ ▲ (toList ▲) (undefined ▲)) ≡ undefined ▲)
  ∧
  ((concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  concat ▲ (map ▲ ▲ (toList ▲) (undefined ▲)) ≡ undefined ▲
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  (true)
  ∧
  ((concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  (concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲)
  ∧
  (∀ a b.
   (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
   ⇒
   (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b))
[Done]

Goal:
  concat ▲ (map ▲ ▲ (toList ▲) ([] ▲)) ≡ [] ▲
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
    ⇒
    (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
   ⇒
   (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b))
[Done]

Goal:
  ∀ a b.
  (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
  ⇒
  (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)
[Done]

Goal:
  (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b)
  ⇒
  (concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b
Goal:
  concat ▲ (map ▲ ▲ (toList ▲) ((:) ▲ a b)) ≡ (:) ▲ a b
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true) ∧ (∀ a b. (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b) ⇒ (true)))
[Done]

Goal:
  ∀ △.
  (true)
  ∧
  ((true) ∧ (∀ a b. (concat ▲ (map ▲ ▲ (toList ▲) b) ≡ b) ⇒ (true)))
[Done]

Successfully proven: concat-of-toList
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

HERMIT> 
[Done]

Leaving GHCi.
ghc: user interrupt
[starting HERMIT-shell v0.1.0.0 on ListLaws.hs]
[starting HERMIT v1.0.0.0 on ListLaws.hs]
% ghc ListLaws.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:ListLaws: -fplugin-opt=HERMIT.GHCI:ListLaws:VerifyConcatOfToListScript.hs -fplugin-opt=HERMIT.GHCI:ListLaws:resume -w
