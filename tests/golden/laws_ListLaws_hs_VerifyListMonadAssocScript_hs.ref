[1 of 1] Compiling ListLaws         ( ListLaws.hs, ListLaws.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

[ 1 of 11] Compiling VerifyNilAppendScript ( VerifyNilAppendScript.hs, interpreted )
[ 2 of 11] Compiling VerifyAppendAssocScript ( VerifyAppendAssocScript.hs, interpreted )
[ 3 of 11] Compiling VerifyConcatAppendScript ( VerifyConcatAppendScript.hs, interpreted )
[ 4 of 11] Compiling VerifyMapNonemptyScript ( VerifyMapNonemptyScript.hs, interpreted )
[ 5 of 11] Compiling VerifyAppendNonemptyScript ( VerifyAppendNonemptyScript.hs, interpreted )
[ 6 of 11] Compiling VerifyMapAppendScript ( VerifyMapAppendScript.hs, interpreted )
[ 7 of 11] Compiling VerifyConcatConcatScript ( VerifyConcatConcatScript.hs, interpreted )
[ 8 of 11] Compiling VerifyConcatNonemptyScript ( VerifyConcatNonemptyScript.hs, interpreted )
[ 9 of 11] Compiling VerifyMapConcatScript ( VerifyMapConcatScript.hs, interpreted )
[10 of 11] Compiling VerifyMapComposeScript ( VerifyMapComposeScript.hs, interpreted )
[11 of 11] Compiling VerifyListMonadAssocScript ( VerifyListMonadAssocScript.hs, interpreted )
Ok, modules loaded: VerifyListMonadAssocScript, VerifyMapComposeScript, VerifyConcatNonemptyScript, VerifyConcatConcatScript, VerifyMapConcatScript, VerifyMapAppendScript, VerifyAppendNonemptyScript, VerifyMapNonemptyScript, VerifyConcatAppendScript, VerifyAppendAssocScript, VerifyNilAppendScript.
map-compose (Not Proven)
  ∀ △ △ △ f g xs.
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) xs ≡ map ▲ ▲ f (map ▲ ▲ g xs)
[Done]

Goal:
  ∀ △ △ △ f g xs.
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) xs ≡ map ▲ ▲ f (map ▲ ▲ g xs)
[Done]

Goal:
  ∀ △ △ △ f g.
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲)
   ≡
   map ▲ ▲ f (map ▲ ▲ g (undefined ▲)))
  ∧
  ((map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  ∀ △ △ △ f g.
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲)
   ≡
   map ▲ ▲ f (map ▲ ▲ g (undefined ▲)))
  ∧
  ((map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲)
   ≡
   map ▲ ▲ f (map ▲ ▲ g (undefined ▲)))
  ∧
  ((map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲)
   ≡
   map ▲ ▲ f (map ▲ ▲ g (undefined ▲)))
  ∧
  ((map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) (undefined ▲)
  ≡
  map ▲ ▲ f (map ▲ ▲ g (undefined ▲))
[Done]

Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ ((.) ▲ ▲ ▲ f g)
                                                (undefined ▲)
  ≡
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                ((λ △ △ ds ds →
                                                    case ds of wild ▲
                                                      [] → [] ▲
                                                      (:) a as →
                                                        (:) ▲ (ds a)
                                                            (map ▲ ▲ ds as)) ▲ ▲
                                                                             g
                                                                             (undefined ▲))
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  ((map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲)))
  ∧
  (∀ a b.
   (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
   ⇒
   (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
    ≡
    map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))))
[Done]

Goal:
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ map ▲ ▲ f (map ▲ ▲ g ([] ▲))
[Done]

Goal:
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) ([] ▲) ≡ [] ▲
[Done]

Goal:
  case [] ▲ of wild ▲
    [] → [] ▲
    (:) a as → (:) ▲ ((.) ▲ ▲ ▲ f g a) (map ▲ ▲ ((.) ▲ ▲ ▲ f g) as)
  ≡
  [] ▲
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
    ⇒
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
     ≡
     map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
   ⇒
   (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
    ≡
    map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))))
[Done]

Goal:
  ∀ a b.
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
  ⇒
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
   ≡
   map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))
[Done]

Goal:
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b))
  ⇒
  (map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
   ≡
   map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b)))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
  ≡
  map ▲ ▲ f (map ▲ ▲ g ((:) ▲ a b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) ((:) ▲ a b)
  ≡
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ ((.) ▲ ▲ ▲ f g)
                                                ((:) ▲ a b)
  ≡
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
  ≡
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
  ≡
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ ((λ △ △ △ f g x → f (g x)) ▲ ▲ ▲ f g) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
  ≡
  (:) ▲ (f (g a)) (map ▲ ▲ (λ x → f (g x)) b)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)) ⇒ (true)))
[Done]

Goal:
  ∀ △ △ △ f g.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ ((.) ▲ ▲ ▲ f g) b ≡ map ▲ ▲ f (map ▲ ▲ g b)) ⇒ (true)))
[Done]

Successfully proven: map-compose
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

concat-nonempty (Not Proven)
  ∀ △ x xs. concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  ∀ △ x xs. concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  ∀ △ x xs. concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  (++) ▲ x (concat ▲ xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  ∀ △ x xs. (++) ▲ x (concat ▲ xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Successfully proven: concat-nonempty
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

append-assoc (Not Proven)
  ∀ △ x y z. (++) ▲ x ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ x y) z
[Done]

nil-append (Not Proven)
  ∀ △ xs. (++) ▲ ([] ▲) xs ≡ xs
[Done]

Goal:
  ∀ △ xs. (++) ▲ ([] ▲) xs ≡ xs
[Done]

Goal:
  ∀ △ xs.
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ([] ▲) xs
  ≡
  xs
[Done]

Goal:
  true
[Done]

Successfully proven: nil-append
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

Goal:
  ∀ △ x y z. (++) ▲ x ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ x y) z
[Done]

Goal:
  ∀ △ y z.
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  ∀ △ y z.
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  ((++) ▲ (undefined ▲) ((++) ▲ y z)
   ≡
   (++) ▲ ((++) ▲ (undefined ▲) y) z)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  (++) ▲ (undefined ▲) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ (undefined ▲) y) z
[Done]

Goal:
  (++) ▲ (undefined ▲) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ (undefined ▲) y) z
[Done]

Goal:
  (++) ▲ (undefined ▲) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ (undefined ▲) y) z
[Done]

Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ (undefined ▲) ((++) ▲ y z)
  ≡
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((++) ▲ (undefined ▲) y) z
[Done]

Goal:
  undefined ▲
  ≡
  case (++) ▲ (undefined ▲) y of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
[Done]

Goal:
  undefined ▲
  ≡
  case (λ △ ds ys →
          case ds of wild ▲
            [] → ys
            (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ (undefined ▲) y
   of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
[Done]

Goal:
  true
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  (true)
  ∧
  (((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  ((++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z)
  ∧
  (∀ a b.
   ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
   ⇒
   ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
    ≡
    (++) ▲ ((++) ▲ ((:) ▲ a b) y) z))
[Done]

Goal:
  (++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z
[Done]

Goal:
  (++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z
[Done]

Goal:
  (++) ▲ ([] ▲) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ([] ▲) y) z
[Done]

Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ([] ▲) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ ([] ▲) y) z
[Done]

Goal:
  (++) ▲ y z ≡ (++) ▲ ((++) ▲ ([] ▲) y) z
[Done]

Goal:
  (++) ▲ y z ≡ (++) ▲ y z
[Done]

Goal:
  true
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
    ⇒
    ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
     ≡
     (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
   ⇒
   ((++) ▲ ((:) ▲ a b) ((++) ▲ y z)
    ≡
    (++) ▲ ((++) ▲ ((:) ▲ a b) y) z))
[Done]

Goal:
  ∀ a b.
  ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
  ⇒
  ((++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)
[Done]

Goal:
  ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z)
  ⇒
  ((++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (++) ▲ ((:) ▲ a b) ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((:) ▲ a b) ((++) ▲ y z)
  ≡
  (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ b ((++) ▲ y z)) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z) ≡ (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (++) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((++) ▲ ((:) ▲ a b) y) z
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  case (++) ▲ ((:) ▲ a b) y of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  case (λ △ ds ys →
          case ds of wild ▲
            [] → ys
            (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲ ((:) ▲ a b) y
   of wild ▲
    [] → z
    (:) x xs → (:) ▲ x ((++) ▲ xs z)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  (:) ▲ a ((++) ▲ ((++) ▲ b y) z) ≡ (:) ▲ a ((++) ▲ ((++) ▲ b y) z)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  (++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b. ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z) ⇒ (true)))
[Done]

Goal:
  ∀ △ y z.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b. ((++) ▲ b ((++) ▲ y z) ≡ (++) ▲ ((++) ▲ b y) z) ⇒ (true)))
[Done]

Goal:
  true
[Done]

Successfully proven: append-assoc
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

concat-append (Not Proven)
  ∀ △ x y. concat ▲ ((++) ▲ x y) ≡ (++) ▲ (concat ▲ x) (concat ▲ y)
[Done]

Goal:
  ∀ △ x y. concat ▲ ((++) ▲ x y) ≡ (++) ▲ (concat ▲ x) (concat ▲ y)
[Done]

Goal:
  ∀ △ y.
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  ∀ △ y.
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  (concat ▲ ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y))
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  concat ▲ ((++) ▲ (undefined ▲) y)
  ≡
  (++) ▲ (concat ▲ (undefined ▲)) (concat ▲ y)
[Done]

Goal:
  undefined ▲
  ≡
  case concat ▲ (undefined ▲) of wild ▲
    [] → concat ▲ y
    (:) x xs → (:) ▲ x ((++) ▲ xs (concat ▲ y))
[Done]

Goal:
  undefined ▲
  ≡
  case case undefined ▲ of wild ▲
         [] → [] ▲
         (:) x xs → (++) ▲ x (concat ▲ xs)
   of wild ▲
    [] → concat ▲ y
    (:) x xs → (:) ▲ x ((++) ▲ xs (concat ▲ y))
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  (true)
  ∧
  ((concat ▲ ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  (concat ▲ ((++) ▲ ([] ▲) y)
   ≡
   (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y))
  ∧
  (∀ a b.
   (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
   ⇒
   (concat ▲ ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)))
[Done]

Goal:
  concat ▲ ((++) ▲ ([] ▲) y) ≡ (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y)
[Done]

Goal:
  concat ▲ y ≡ (++) ▲ (concat ▲ ([] ▲)) (concat ▲ y)
[Done]

Goal:
  concat ▲ y ≡ concat ▲ y
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (concat ▲ ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
   ⇒
   (concat ▲ ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)))
[Done]

Goal:
  ∀ a b.
  (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
  ⇒
  (concat ▲ ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))
[Done]

Goal:
  (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
  ⇒
  (concat ▲ ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  concat ▲ ((++) ▲ ((:) ▲ a b) y)
  ≡
  (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  (++) ▲ a ((++) ▲ (concat ▲ b) (concat ▲ y))
  ≡
  (++) ▲ (concat ▲ ((:) ▲ a b)) (concat ▲ y)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  (++) ▲ a ((++) ▲ (concat ▲ b) (concat ▲ y))
  ≡
  (++) ▲ a ((++) ▲ (concat ▲ b) (concat ▲ y))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y)
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (true)))
[Done]

Goal:
  ∀ △ y.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ ((++) ▲ b y) ≡ (++) ▲ (concat ▲ b) (concat ▲ y))
    ⇒
    (true)))
[Done]

Successfully proven: concat-append
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

concat-concat (Not Proven)
  ∀ △ x. concat ▲ (concat ▲ x) ≡ concat ▲ (map ▲ ▲ (concat ▲) x)
[Done]

Goal:
  ∀ △ x. concat ▲ (concat ▲ x) ≡ concat ▲ (map ▲ ▲ (concat ▲) x)
[Done]

Goal:
  ∀ △.
  (concat ▲ (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (concat ▲) (undefined ▲)))
  ∧
  ((concat ▲ (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  ∀ △.
  (concat ▲ (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (concat ▲) (undefined ▲)))
  ∧
  ((concat ▲ (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  (concat ▲ (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (concat ▲) (undefined ▲)))
  ∧
  ((concat ▲ (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  (concat ▲ (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (concat ▲) (undefined ▲)))
  ∧
  ((concat ▲ (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  concat ▲ (concat ▲ (undefined ▲))
  ≡
  concat ▲ (map ▲ ▲ (concat ▲) (undefined ▲))
[Done]

Goal:
  undefined ▲ ≡ concat ▲ (map ▲ ▲ (concat ▲) (undefined ▲))
[Done]

Goal:
  undefined ▲
  ≡
  case map ▲ ▲ (concat ▲) (undefined ▲) of wild ▲
    [] → [] ▲
    (:) x xs → (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  undefined ▲
  ≡
  case case undefined ▲ of wild ▲
         [] → [] ▲
         (:) a as → (:) ▲ (concat ▲ a) (map ▲ ▲ (concat ▲) as)
   of wild ▲
    [] → [] ▲
    (:) x xs → (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((concat ▲ (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  ((concat ▲ (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  (concat ▲ (concat ▲ ([] ▲)) ≡ concat ▲ (map ▲ ▲ (concat ▲) ([] ▲)))
  ∧
  (∀ a b.
   (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
   ⇒
   (concat ▲ (concat ▲ ((:) ▲ a b))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b))))
[Done]

Goal:
  concat ▲ (concat ▲ ([] ▲)) ≡ concat ▲ (map ▲ ▲ (concat ▲) ([] ▲))
[Done]

Goal:
  [] ▲ ≡ concat ▲ (map ▲ ▲ (concat ▲) ([] ▲))
[Done]

Goal:
  [] ▲ ≡ [] ▲
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (concat ▲ (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
   ⇒
   (concat ▲ (concat ▲ ((:) ▲ a b))
    ≡
    concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b))))
[Done]

Goal:
  ∀ a b.
  (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
  ⇒
  (concat ▲ (concat ▲ ((:) ▲ a b))
   ≡
   concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))
[Done]

Goal:
  (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
  ⇒
  (concat ▲ (concat ▲ ((:) ▲ a b))
   ≡
   concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b)))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b)
Goal:
  concat ▲ (concat ▲ ((:) ▲ a b))
  ≡
  concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b)
Goal:
  concat ▲ ((++) ▲ a (concat ▲ b))
  ≡
  concat ▲ (map ▲ ▲ (concat ▲) ((:) ▲ a b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b)
Goal:
  concat ▲ ((++) ▲ a (concat ▲ b)) ≡ concat ▲ ((++) ▲ a (concat ▲ b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b)
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (true)))
[Done]

Goal:
  ∀ △.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (concat ▲ (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (concat ▲) b))
    ⇒
    (true)))
[Done]

Successfully proven: concat-concat
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

map-concat (Not Proven)
  ∀ △ △ f xs.
  map ▲ ▲ f (concat ▲ xs) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) xs)
[Done]

map-append (Not Proven)
  ∀ △ △ f x y.
  map ▲ ▲ f ((++) ▲ x y) ≡ (++) ▲ (map ▲ ▲ f x) (map ▲ ▲ f y)
[Done]

append-nonempty (Not Proven)
  ∀ △ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
[Done]

Goal:
  ∀ △ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
[Done]

Goal:
  ∀ △ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
[Done]

Goal:
  (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
[Done]

Goal:
  (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
[Done]

Goal:
  (++) ▲ ((:) ▲ x1 xs) ys
[Done]

Goal:
  case (:) ▲ x1 xs of wild ▲
    [] → ys
    (:) x xs → (:) ▲ x ((++) ▲ xs ys)
[Done]

Goal:
  (:) ▲ x1 ((++) ▲ xs ys)
  ≡
  case (:) ▲ x1 xs of wild ▲
    [] → ys
    (:) x xs → (:) ▲ x ((++) ▲ xs ys)
[Done]

Goal:
  true
[Done]

Goal:
  ∀ △ x1 xs ys. true
[Done]

Successfully proven: append-nonempty
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

map-nonempty (Not Proven)
  ∀ △ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
[Done]

Goal:
  ∀ △ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
[Done]

Goal:
  ∀ △ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
[Done]

Goal:
  map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
[Done]

Goal:
  case (:) ▲ a as of wild ▲
    [] → [] ▲
    (:) a as → (:) ▲ (f a) (map ▲ ▲ f as)
  ≡
  (:) ▲ (f a) (map ▲ ▲ f as)
[Done]

Goal:
  true
[Done]

Goal:
  ∀ △ △ f a as. true
[Done]

Successfully proven: map-nonempty
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

Goal:
  ∀ △ △ f x y.
  map ▲ ▲ f ((++) ▲ x y) ≡ (++) ▲ (map ▲ ▲ f x) (map ▲ ▲ f y)
[Done]

Goal:
  ∀ △ △ f y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  ∀ △ △ f y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  map ▲ ▲ f ((++) ▲ (undefined ▲) y)
  ≡
  (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y)
[Done]

Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                ((++) ▲ (undefined ▲) y)
  ≡
  (++) ▲
       ((λ △ △ ds ds →
           case ds of wild ▲
             [] → [] ▲
             (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f (undefined ▲))
       ((λ △ △ ds ds →
           case ds of wild ▲
             [] → [] ▲
             (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f y)
[Done]

Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                ((λ △ ds ys →
                                                    case ds of wild ▲
                                                      [] → ys
                                                      (:) x xs →
                                                        (:) ▲ x
                                                            ((++) ▲ xs ys)) ▲
                                                                            (undefined ▲)
                                                                            y)
  ≡
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲
                                          ((λ △ △ ds ds →
                                              case ds of wild ▲
                                                [] → [] ▲
                                                (:) a as →
                                                  (:) ▲ (ds a)
                                                      (map ▲ ▲ ds as)) ▲ ▲ f
                                                                       (undefined ▲))
                                          ((λ △ △ ds ds →
                                              case ds of wild ▲
                                                [] → [] ▲
                                                (:) a as →
                                                  (:) ▲ (ds a)
                                                      (map ▲ ▲ ds as)) ▲ ▲ f y)
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  (true)
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  (map ▲ ▲ f ((++) ▲ ([] ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
  ∧
  (∀ a b.
   (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
   ⇒
   (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)))
[Done]

Goal:
  map ▲ ▲ f ((++) ▲ ([] ▲) y)
  ≡
  (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y)
[Done]

Goal:
  map ▲ ▲ f y ≡ (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y)
[Done]

Goal:
  map ▲ ▲ f y ≡ map ▲ ▲ f y
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
   ⇒
   (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)))
[Done]

Goal:
  ∀ a b.
  (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
  ⇒
  (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))
[Done]

Goal:
  (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
  ⇒
  (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y)
Goal:
  map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
  ≡
  (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y)
Goal:
  (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)
  ≡
  (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y)
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (true)))
[Done]

Goal:
  ∀ △ △ f y.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (true)))
[Done]

Successfully proven: map-append
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

concat-nonempty (Not Proven)
  ∀ △ x xs. concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  ∀ △ x xs. concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  ∀ △ x xs. concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  concat ▲ ((:) ▲ x xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  (++) ▲ x (concat ▲ xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Goal:
  ∀ △ x xs. (++) ▲ x (concat ▲ xs) ≡ (++) ▲ x (concat ▲ xs)
[Done]

Successfully proven: concat-nonempty
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

Goal:
  ∀ △ △ f xs.
  map ▲ ▲ f (concat ▲ xs) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) xs)
[Done]

Goal:
  ∀ △ △ f.
  (map ▲ ▲ f (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) (undefined ▲)))
  ∧
  ((map ▲ ▲ f (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  ∀ △ △ f.
  (map ▲ ▲ f (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) (undefined ▲)))
  ∧
  ((map ▲ ▲ f (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  (map ▲ ▲ f (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) (undefined ▲)))
  ∧
  ((map ▲ ▲ f (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  (map ▲ ▲ f (concat ▲ (undefined ▲))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) (undefined ▲)))
  ∧
  ((map ▲ ▲ f (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  map ▲ ▲ f (concat ▲ (undefined ▲))
  ≡
  concat ▲ (map ▲ ▲ (map ▲ ▲ f) (undefined ▲))
[Done]

Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                (concat ▲ (undefined ▲))
  ≡
  concat ▲
         ((λ △ △ ds ds →
             case ds of wild ▲
               [] → [] ▲
               (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲
                                                        ((λ △ △ ds ds →
                                                            case ds of wild ▲
                                                              [] → [] ▲
                                                              (:) a as →
                                                                (:) ▲ (ds a)
                                                                    (map ▲ ▲ ds
                                                                         as)) ▲
                                                                              ▲
                                                                              f)
                                                        (undefined ▲))
[Done]

Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                ((λ △ ds →
                                                    case ds of wild ▲
                                                      [] → [] ▲
                                                      (:) x xs →
                                                        (++) ▲ x
                                                             (concat ▲ xs)) ▲
                                                                            (undefined ▲))
  ≡
  (λ △ ds →
     case ds of wild ▲
       [] → [] ▲
       (:) x xs → (++) ▲ x (concat ▲ xs)) ▲
                                          ((λ △ △ ds ds →
                                              case ds of wild ▲
                                                [] → [] ▲
                                                (:) a as →
                                                  (:) ▲ (ds a)
                                                      (map ▲ ▲ ds as)) ▲ ▲
                                                                       ((λ △ △ ds ds →
                                                                           case ds
                                                                            of wild ▲
                                                                             [] →
                                                                               [] ▲
                                                                             (:) a
                                                                                 as →
                                                                               (:) ▲
                                                                                   (ds a)
                                                                                   (map ▲
                                                                                        ▲
                                                                                        ds
                                                                                        as)) ▲
                                                                                             ▲
                                                                                             f)
                                                                       (undefined ▲))
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((map ▲ ▲ f (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  ((map ▲ ▲ f (concat ▲ ([] ▲))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  (map ▲ ▲ f (concat ▲ ([] ▲))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲)))
  ∧
  (∀ a b.
   (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
   ⇒
   (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b))))
[Done]

Goal:
  map ▲ ▲ f (concat ▲ ([] ▲)) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲))
[Done]

Goal:
  [] ▲ ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) ([] ▲))
[Done]

Goal:
  [] ▲ ≡ [] ▲
[Done]

Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
     ≡
     concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))))
[Done]

Goal:
  (true)
  ∧
  (∀ a b.
   (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
   ⇒
   (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
    ≡
    concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b))))
[Done]

Goal:
  ∀ a b.
  (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
  ⇒
  (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))
[Done]

Goal:
  (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
  ⇒
  (map ▲ ▲ f (concat ▲ ((:) ▲ a b))
   ≡
   concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b)))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b)
Goal:
  map ▲ ▲ f (concat ▲ ((:) ▲ a b))
  ≡
  concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b)
Goal:
  (++) ▲ (map ▲ ▲ f a) (concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
  ≡
  concat ▲ (map ▲ ▲ (map ▲ ▲ f) ((:) ▲ a b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b)
Goal:
  (++) ▲ (map ▲ ▲ f a) (concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
  ≡
  (++) ▲ (map ▲ ▲ f a) (concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
[Done]

Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b)
Goal:
  true
[Done]

Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (true)))
[Done]

Goal:
  ∀ △ △ f.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f (concat ▲ b) ≡ concat ▲ (map ▲ ▲ (map ▲ ▲ f) b))
    ⇒
    (true)))
[Done]

Successfully proven: map-concat
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

monad-assoc (Not Proven)
  ∀ △ △ △ m f g.
  bind ▲ ▲ (bind ▲ ▲ m f) g ≡ bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  ∀ △ △ △ m f g.
  bind ▲ ▲ (bind ▲ ▲ m f) g ≡ bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  ∀ △ △ △ m f g.
  bind ▲ ▲ (bind ▲ ▲ m f) g ≡ bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  bind ▲ ▲ (bind ▲ ▲ m f) g ≡ bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  concat ▲ (map ▲ ▲ (concat ▲) (map ▲ ▲ (map ▲ ▲ g) (map ▲ ▲ f m)))
  ≡
  bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  concat ▲ (map ▲ ▲ (concat ▲) (map ▲ ▲ (map ▲ ▲ g) (map ▲ ▲ f m)))
  ≡
  bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  bind ▲ ▲ m (λ x → bind ▲ ▲ (f x) g)
[Done]

Goal:
  concat ▲ (map ▲ ▲ (λ x → concat ▲ (map ▲ ▲ g (f x))) m)
[Done]

Goal:
  concat ▲ (map ▲ ▲ (λ x → concat ▲ (map ▲ ▲ g (f x))) m)
[Done]

Goal:
  map ▲ ▲ (λ x → concat ▲ (map ▲ ▲ g (f x))) m
[Done]

Goal:
  map ▲ ▲ (λ x → concat ▲ (map ▲ ▲ g (f x)))
[Done]

Goal:
  λ x → concat ▲ (map ▲ ▲ g (f x))
[Done]

Goal:
  concat ▲ (map ▲ ▲ g (f x))
[Done]

Goal:
  map ▲ ▲ g (f x)
[Done]

Goal:
  (.) ▲ ▲ ▲ (map ▲ ▲ g) f x
[Done]

Goal:
  concat ▲ (map ▲ ▲ (λ x → concat ▲ ((.) ▲ ▲ ▲ (map ▲ ▲ g) f x)) m)
[Done]

Goal:
  concat ▲ (map ▲ ▲ (λ x → concat ▲ ((.) ▲ ▲ ▲ (map ▲ ▲ g) f x)) m)
[Done]

Goal:
  map ▲ ▲ (λ x → concat ▲ ((.) ▲ ▲ ▲ (map ▲ ▲ g) f x)) m
[Done]

Goal:
  map ▲ ▲ (λ x → concat ▲ ((.) ▲ ▲ ▲ (map ▲ ▲ g) f x))
[Done]

Goal:
  λ x → concat ▲ ((.) ▲ ▲ ▲ (map ▲ ▲ g) f x)
[Done]

Goal:
  λ x → (.) ▲ ▲ ▲ (concat ▲) ((.) ▲ ▲ ▲ ((.) ▲ ▲ ▲) (map ▲ ▲) g f) x
[Done]

Goal:
  (.) ▲ ▲ ▲ (concat ▲) ((.) ▲ ▲ ▲ ((.) ▲ ▲ ▲) (map ▲ ▲) g f)
[Done]

Goal:
  concat ▲
         (map ▲ ▲
              ((.) ▲ ▲ ▲ (concat ▲) ((.) ▲ ▲ ▲ ((.) ▲ ▲ ▲) (map ▲ ▲) g f)) m)
[Done]

Goal:
  concat ▲
         (map ▲ ▲ (concat ▲)
              (map ▲ ▲ ((.) ▲ ▲ ▲ ((.) ▲ ▲ ▲) (map ▲ ▲) g f) m))
[Done]

Goal:
  concat ▲ (map ▲ ▲ (concat ▲) (map ▲ ▲ ((.) ▲ ▲ ▲ (map ▲ ▲ g) f) m))
[Done]

Goal:
  concat ▲ (map ▲ ▲ (concat ▲) (map ▲ ▲ (map ▲ ▲ g) (map ▲ ▲ f m)))
[Done]

Goal:
  concat ▲ (map ▲ ▲ (concat ▲) (map ▲ ▲ (map ▲ ▲ g) (map ▲ ▲ f m)))
  ≡
  concat ▲ (map ▲ ▲ (concat ▲) (map ▲ ▲ (map ▲ ▲ g) (map ▲ ▲ f m)))
[Done]

Goal:
  true
[Done]

Goal:
  ∀ △ △ △ m f g. true
[Done]

Successfully proven: monad-assoc
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[Done]

HERMIT> 
[Done]

Leaving GHCi.
ghc: user interrupt
[starting HERMIT-shell v0.1.0.0 on ListLaws.hs]
[starting HERMIT v1.0.0.0 on ListLaws.hs]
% ghc ListLaws.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:ListLaws: -fplugin-opt=HERMIT.GHCI:ListLaws:VerifyListMonadAssocScript.hs -fplugin-opt=HERMIT.GHCI:ListLaws:resume -w
