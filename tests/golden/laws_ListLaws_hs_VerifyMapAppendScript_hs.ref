[1 of 1] Compiling ListLaws         ( ListLaws.hs, ListLaws.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help
module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
[1 of 3] Compiling VerifyMapNonemptyScript ( VerifyMapNonemptyScript.hs, interpreted )
[2 of 3] Compiling VerifyAppendNonemptyScript ( VerifyAppendNonemptyScript.hs, interpreted )
[3 of 3] Compiling VerifyMapAppendScript ( VerifyMapAppendScript.hs, interpreted )
Ok, modules loaded: VerifyMapAppendScript, VerifyAppendNonemptyScript, VerifyMapNonemptyScript.
map-append (Not Proven)
  ∀ △ △ f x y.
  map ▲ ▲ f ((++) ▲ x y) ≡ (++) ▲ (map ▲ ▲ f x) (map ▲ ▲ f y)
append-nonempty (Not Proven)
  ∀ △ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  ∀ △ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  ∀ △ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  ∀ x1 xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  ∀ xs ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  ∀ ys. (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  (:) ▲ x1 ((++) ▲ xs ys) ≡ (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  (++) ▲ ((:) ▲ x1 xs) ys
Goal:
  case (:) ▲ x1 xs of wild ▲
    [] → ys
    (:) x xs → (:) ▲ x ((++) ▲ xs ys)
Goal:
  (:) ▲ x1 ((++) ▲ xs ys)
  ≡
  case (:) ▲ x1 xs of wild ▲
    [] → ys
    (:) x xs → (:) ▲ x ((++) ▲ xs ys)
Goal:
  true
Goal:
  ∀ △ x1 xs ys. true
Successfully proven: append-nonempty

module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
map-nonempty (Not Proven)
  ∀ △ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ △ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ △ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ △ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ f a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ a as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ as. map ▲ ▲ f ((:) ▲ a as) ≡ (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  ∀ as.
  case (:) ▲ a as of wild ▲
    [] → [] ▲
    (:) a as → (:) ▲ (f a) (map ▲ ▲ f as)
  ≡
  (:) ▲ (f a) (map ▲ ▲ f as)
Goal:
  true
Goal:
  ∀ △ △ f a. true
Successfully proven: map-nonempty

module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
Goal:
  ∀ △ △ f x y.
  map ▲ ▲ f ((++) ▲ x y) ≡ (++) ▲ (map ▲ ▲ f x) (map ▲ ▲ f y)
Goal:
  ∀ △ △ f y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  ∀ △ △ f y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  ∀ △ f y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  ∀ f y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  ∀ y.
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  (map ▲ ▲ f ((++) ▲ (undefined ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y))
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  map ▲ ▲ f ((++) ▲ (undefined ▲) y)
  ≡
  (++) ▲ (map ▲ ▲ f (undefined ▲)) (map ▲ ▲ f y)
Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                ((++) ▲ (undefined ▲) y)
  ≡
  (++) ▲
       ((λ △ △ ds ds →
           case ds of wild ▲
             [] → [] ▲
             (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f (undefined ▲))
       ((λ △ △ ds ds →
           case ds of wild ▲
             [] → [] ▲
             (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f y)
Goal:
  (λ △ △ ds ds →
     case ds of wild ▲
       [] → [] ▲
       (:) a as → (:) ▲ (ds a) (map ▲ ▲ ds as)) ▲ ▲ f
                                                ((λ △ ds ys →
                                                    case ds of wild ▲
                                                      [] → ys
                                                      (:) x xs →
                                                        (:) ▲ x
                                                            ((++) ▲ xs ys)) ▲
                                                                            (undefined ▲)
                                                                            y)
  ≡
  (λ △ ds ys →
     case ds of wild ▲
       [] → ys
       (:) x xs → (:) ▲ x ((++) ▲ xs ys)) ▲
                                          ((λ △ △ ds ds →
                                              case ds of wild ▲
                                                [] → [] ▲
                                                (:) a as →
                                                  (:) ▲ (ds a)
                                                      (map ▲ ▲ ds as)) ▲ ▲ f
                                                                       (undefined ▲))
                                          ((λ △ △ ds ds →
                                              case ds of wild ▲
                                                [] → [] ▲
                                                (:) a as →
                                                  (:) ▲ (ds a)
                                                      (map ▲ ▲ ds as)) ▲ ▲ f y)
Goal:
  true
Goal:
  (true)
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  (true)
  ∧
  ((map ▲ ▲ f ((++) ▲ ([] ▲) y)
    ≡
    (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  (map ▲ ▲ f ((++) ▲ ([] ▲) y)
   ≡
   (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y))
  ∧
  (∀ a b.
   (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
   ⇒
   (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)))
Goal:
  map ▲ ▲ f ((++) ▲ ([] ▲) y)
  ≡
  (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y)
Goal:
  map ▲ ▲ f y ≡ (++) ▲ (map ▲ ▲ f ([] ▲)) (map ▲ ▲ f y)
Goal:
  map ▲ ▲ f y ≡ map ▲ ▲ f y
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
     ≡
     (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))))
Goal:
  (true)
  ∧
  (∀ a b.
   (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
   ⇒
   (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
    ≡
    (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)))
Goal:
  ∀ a b.
  (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
  ⇒
  (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))
Goal:
  ∀ b.
  (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
  ⇒
  (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))
Goal:
  (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
  ⇒
  (map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
   ≡
   (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y))
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y)
Goal:
  map ▲ ▲ f ((++) ▲ ((:) ▲ a b) y)
  ≡
  (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y)
Goal:
  (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)
  ≡
  (++) ▲ (map ▲ ▲ f ((:) ▲ a b)) (map ▲ ▲ f y)
Assumed lemmas: 
ind-hyp-0 (Built In)
  map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y)
Goal:
  true
Goal:
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (true)))
Goal:
  ∀ △ △ f y.
  (true)
  ∧
  ((true)
   ∧
   (∀ a b.
    (map ▲ ▲ f ((++) ▲ b y) ≡ (++) ▲ (map ▲ ▲ f b) (map ▲ ▲ f y))
    ⇒
    (true)))
Successfully proven: map-append

module ListLaws where
  mempt ∷ ∀ a . [a]
  (++) ∷ ∀ a . [a] → [a] → [a]
  mappen ∷ ∀ a . [a] → [a] → [a]
  toList ∷ ∀ a . a → [a]
  concat ∷ ∀ a . [[a]] → [a]
  map ∷ ∀ a b . (a → b) → [a] → [b]
  retur ∷ ∀ a . a → [a]
  bind ∷ ∀ a b . [a] → (a → [b]) → [b]
HERMIT> Leaving GHCi.
ghc: user interrupt
[starting HERMIT-shell v0.1.0.0 on ListLaws.hs]
[starting HERMIT v1.0.0.1 on ListLaws.hs]
% ghc ListLaws.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:ListLaws: -fplugin-opt=HERMIT.GHCI:ListLaws:VerifyMapAppendScript.hs -fplugin-opt=HERMIT.GHCI:ListLaws:resume -w
