[1 of 1] Compiling HanoiScript      ( HanoiScript.hs, nothing )
[1 of 1] Compiling Main             ( Hanoi.hs, Hanoi.o )
Setting phasers to stun... (port 3000) (ctrl-c to quit)
GHCi, version 7.10.1: http://www.haskell.org/ghc/  :? for help
module Main where
  hanoi ∷ Nat → Peg → Peg → Peg → Moves
  hanoi' ∷ Nat → Peg → Peg → Peg → [(Peg, Peg)]
  unwrap ∷ (Nat → Peg → Peg → Peg → Moves) → Nat → Peg → Peg → Peg → (Moves, Moves, Moves)
  wrap ∷ (Nat → Peg → Peg → Peg → (Moves, Moves, Moves)) → Nat → Peg → Peg → Peg → Moves
  $c== ∷ Peg → Peg → Bool
  $fEqPeg ∷ Eq Peg
  $c/= ∷ Peg → Peg → Bool
  $dEq ∷ Eq (Peg, Peg)
  $cshowsPrec ∷ Int → Peg → ShowS
  $fShowPeg ∷ Show Peg
  $cshowList ∷ [Peg] → ShowS
  $cshow ∷ Peg → String
  $dShow ∷ Show (Peg, Peg)
  $dShow ∷ Show [(Peg, Peg)]
  $dEq ∷ Eq [(Peg, Peg)]
  toInt ∷ Nat → Int
  $cshow ∷ Nat → String
  $fShowNat ∷ Show Nat
  $cshowList ∷ [Nat] → ShowS
  $cshowsPrec ∷ Int → Nat → ShowS
  fromInt ∷ Int → Nat
  main ∷ IO ()
  main ∷ IO ()
[Done]

[1 of 1] Compiling HanoiScript      ( HanoiScript.hs, interpreted )
Ok, modules loaded: HanoiScript.
module Main where
  hanoi ∷ Nat → Peg → Peg → Peg → Moves
  hanoi' ∷ Nat → Peg → Peg → Peg → [(Peg, Peg)]
  unwrap ∷ (Nat → Peg → Peg → Peg → Moves) → Nat → Peg → Peg → Peg → (Moves, Moves, Moves)
  wrap ∷ (Nat → Peg → Peg → Peg → (Moves, Moves, Moves)) → Nat → Peg → Peg → Peg → Moves
  $c== ∷ Peg → Peg → Bool
  $fEqPeg ∷ Eq Peg
  $c/= ∷ Peg → Peg → Bool
  $dEq ∷ Eq (Peg, Peg)
  $cshowsPrec ∷ Int → Peg → ShowS
  $fShowPeg ∷ Show Peg
  $cshowList ∷ [Peg] → ShowS
  $cshow ∷ Peg → String
  $dShow ∷ Show (Peg, Peg)
  $dShow ∷ Show [(Peg, Peg)]
  $dEq ∷ Eq [(Peg, Peg)]
  toInt ∷ Nat → Int
  $cshow ∷ Nat → String
  $fShowNat ∷ Show Nat
  $cshowList ∷ [Nat] → ShowS
  $cshowsPrec ∷ Int → Nat → ShowS
  fromInt ∷ Int → Nat
  main ∷ IO ()
  main ∷ IO ()
[Done]

hanoi = λ ds ds ds ds →
  case ds of wild ▲
    Z → [] ▲
    S n →
      (++) ▲ (hanoi n ds ds ds)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ ds ds) ([] ▲)) (hanoi n ds ds ds))
[Done]

hanoi = λ ds ds ds ds →
  case ds of wild ▲
    Z → [] ▲
    S n →
      (++) ▲ (hanoi n ds ds ds)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ ds ds) ([] ▲)) (hanoi n ds ds ds))
[Done]

hanoi =
  let f = λ hanoi ds ds ds ds →
        case ds of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (hanoi n ds ds ds)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ ds ds) ([] ▲)) (hanoi n ds ds ds))
      rec work = unwrap (f (wrap work))
  in wrap work
[Done]

hanoi =
  let f = λ hanoi ds ds ds ds →
        case ds of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (hanoi n ds ds ds)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ ds ds) ([] ▲)) (hanoi n ds ds ds))
      rec work = unwrap (f (wrap work))
  in wrap work
[Done]

hanoi =
  let f = λ hanoi ds ds ds ds →
        case ds of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (hanoi n ds ds ds)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ ds ds) ([] ▲)) (hanoi n ds ds ds))
      rec work = unwrap (f (wrap work))
  in wrap work
[Done]

work = unwrap (f (wrap work))
[Done]

'"Object (fromList [(\"params\",Array (fromList [Object (fromList [(\"params\",Array (fromList [String \"origwork\"])),(\"method\",String \"remember\")])])),(\"method\",String \"query\")])" [correct]

[Done]

work = λ n d b c →
  (,,) ▲ ▲ ▲ (f (wrap work) n d b c) (f (wrap work) n b c d)
       (f (wrap work) n c d b)
[Done]

λ n d b c →
  (,,) ▲ ▲ ▲ (f (wrap work) n d b c) (f (wrap work) n b c d)
       (f (wrap work) n c d b)
[Done]

λ d b c →
  (,,) ▲ ▲ ▲ (f (wrap work) n d b c) (f (wrap work) n b c d)
       (f (wrap work) n c d b)
[Done]

λ b c →
  (,,) ▲ ▲ ▲ (f (wrap work) n d b c) (f (wrap work) n b c d)
       (f (wrap work) n c d b)
[Done]

λ c →
  (,,) ▲ ▲ ▲ (f (wrap work) n d b c) (f (wrap work) n b c d)
       (f (wrap work) n c d b)
[Done]

(,,) ▲ ▲ ▲ (f (wrap work) n d b c) (f (wrap work) n b c d)
     (f (wrap work) n c d b)
[Done]

case n of w ▲
  Z →
    (,,) ▲ ▲ ▲ (f (wrap work) Z d b c) (f (wrap work) Z b c d)
         (f (wrap work) Z c d b)
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S a) d b c) (f (wrap work) (S a) b c d)
         (f (wrap work) (S a) c d b)
[Done]

case n of w ▲
  Z →
    (,,) ▲ ▲ ▲ (f (wrap work) Z d b c) (f (wrap work) Z b c d)
         (f (wrap work) Z c d b)
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S a) d b c) (f (wrap work) (S a) b c d)
         (f (wrap work) (S a) c d b)
[Done]

Z →
  (,,) ▲ ▲ ▲ (f (wrap work) Z d b c) (f (wrap work) Z b c d)
       (f (wrap work) Z c d b)
[Done]

Z →
  (,,) ▲ ▲ ▲
       (case Z of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n d c b)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (wrap work n c b d)))
       (case Z of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n b d c)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (wrap work n d c b)))
       (case Z of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n c b d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (wrap work n b d c)))
[Done]

Z → (,,) ▲ ▲ ▲ ([] ▲) ([] ▲) ([] ▲)
[Done]

case n of w ▲
  Z → (,,) ▲ ▲ ▲ ([] ▲) ([] ▲) ([] ▲)
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S a) d b c) (f (wrap work) (S a) b c d)
         (f (wrap work) (S a) c d b)
[Done]

case n of w ▲
  Z → (,,) ▲ ▲ ▲ ([] ▲) ([] ▲) ([] ▲)
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S a) d b c) (f (wrap work) (S a) b c d)
         (f (wrap work) (S a) c d b)
[Done]

S a →
  (,,) ▲ ▲ ▲ (f (wrap work) (S a) d b c) (f (wrap work) (S a) b c d)
       (f (wrap work) (S a) c d b)
[Done]

(,,) ▲ ▲ ▲ (f (wrap work) (S a) d b c) (f (wrap work) (S a) b c d)
     (f (wrap work) (S a) c d b)
[Done]

case a of w ▲
  Z →
    (,,) ▲ ▲ ▲ (f (wrap work) (S Z) d b c) (f (wrap work) (S Z) b c d)
         (f (wrap work) (S Z) c d b)
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S (S a)) d b c)
         (f (wrap work) (S (S a)) b c d) (f (wrap work) (S (S a)) c d b)
[Done]

case a of w ▲
  Z →
    (,,) ▲ ▲ ▲ (f (wrap work) (S Z) d b c) (f (wrap work) (S Z) b c d)
         (f (wrap work) (S Z) c d b)
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S (S a)) d b c)
         (f (wrap work) (S (S a)) b c d) (f (wrap work) (S (S a)) c d b)
[Done]

Z →
  (,,) ▲ ▲ ▲ (f (wrap work) (S Z) d b c) (f (wrap work) (S Z) b c d)
       (f (wrap work) (S Z) c d b)
[Done]

Z →
  (,,) ▲ ▲ ▲
       (case S Z of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n d c b)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (wrap work n c b d)))
       (case S Z of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n b d c)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (wrap work n d c b)))
       (case S Z of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n c b d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (wrap work n b d c)))
[Done]

Z →
  (,,) ▲ ▲ ▲
       ((++) ▲ (wrap work Z d c b)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (wrap work Z c b d)))
       ((++) ▲ (wrap work Z b d c)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (wrap work Z d c b)))
       ((++) ▲ (wrap work Z c b d)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (wrap work Z b d c)))
[Done]

Z →
  (,,) ▲ ▲ ▲
       ((++) ▲ (wrap (unwrap (f (wrap work))) Z d c b)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   (wrap (unwrap (f (wrap work))) Z c b d)))
       ((++) ▲ (wrap (unwrap (f (wrap work))) Z b d c)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   (wrap (unwrap (f (wrap work))) Z d c b)))
       ((++) ▲ (wrap (unwrap (f (wrap work))) Z c b d)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   (wrap (unwrap (f (wrap work))) Z b d c)))
[Done]

Z →
  (,,) ▲ ▲ ▲
       ((++) ▲ (f (wrap work) Z d c b)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (f (wrap work) Z c b d)))
       ((++) ▲ (f (wrap work) Z b d c)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (f (wrap work) Z d c b)))
       ((++) ▲ (f (wrap work) Z c b d)
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (f (wrap work) Z b d c)))
[Done]

Z →
  (,,) ▲ ▲ ▲
       ((++) ▲
             (case Z of wild ▲
                Z → [] ▲
                S n →
                  (++) ▲ (wrap work n d b c)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                             (wrap work n b c d)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   (case Z of wild ▲
                      Z → [] ▲
                      S n →
                        (++) ▲ (wrap work n c d b)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                   (wrap work n d b c)))))
       ((++) ▲
             (case Z of wild ▲
                Z → [] ▲
                S n →
                  (++) ▲ (wrap work n b c d)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                             (wrap work n c d b)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   (case Z of wild ▲
                      Z → [] ▲
                      S n →
                        (++) ▲ (wrap work n d b c)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                   (wrap work n b c d)))))
       ((++) ▲
             (case Z of wild ▲
                Z → [] ▲
                S n →
                  (++) ▲ (wrap work n c d b)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                             (wrap work n d b c)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   (case Z of wild ▲
                      Z → [] ▲
                      S n →
                        (++) ▲ (wrap work n b c d)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                   (wrap work n c d b)))))
[Done]

Z →
  (,,) ▲ ▲ ▲
       ((++) ▲ ([] ▲) ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲)))
       ((++) ▲ ([] ▲) ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲)))
       ((++) ▲ ([] ▲) ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲)))
[Done]

Z →
  (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
[Done]

Forcing obligation: [] ++
Goal:
  ∀ △ l. (++) ▲ ([] ▲) l ≡ lGoal:
  ∀ △ l. l ≡ l
[Done]

Goal:
  ∀ △ l. true
[Done]

Successfully proven: [] ++
Z →
  (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
[Done]

case a of w ▲
  Z →
    (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S (S a)) d b c)
         (f (wrap work) (S (S a)) b c d) (f (wrap work) (S (S a)) c d b)
[Done]

case a of w ▲
  Z →
    (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
  S a →
    (,,) ▲ ▲ ▲ (f (wrap work) (S (S a)) d b c)
         (f (wrap work) (S (S a)) b c d) (f (wrap work) (S (S a)) c d b)
[Done]

S a →
  (,,) ▲ ▲ ▲ (f (wrap work) (S (S a)) d b c)
       (f (wrap work) (S (S a)) b c d) (f (wrap work) (S (S a)) c d b)
[Done]

S a →
  (,,) ▲ ▲ ▲
       (case S (S a) of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n d c b)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (wrap work n c b d)))
       (case S (S a) of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n b d c)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (wrap work n d c b)))
       (case S (S a) of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (wrap work n c b d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (wrap work n b d c)))
[Done]

S a →
  (,,) ▲ ▲ ▲
       (let n = S a
        in (++) ▲ (wrap work n d c b)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (wrap work n c b d)))
       (let n = S a
        in (++) ▲ (wrap work n b d c)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (wrap work n d c b)))
       (let n = S a
        in (++) ▲ (wrap work n c b d)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (wrap work n b d c)))
[Done]

S a →
  (,,) ▲ ▲ ▲
       (let n = S a
        in (++) ▲ (wrap (unwrap (f (wrap work))) n d c b)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                      (wrap (unwrap (f (wrap work))) n c b d)))
       (let n = S a
        in (++) ▲ (wrap (unwrap (f (wrap work))) n b d c)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                      (wrap (unwrap (f (wrap work))) n d c b)))
       (let n = S a
        in (++) ▲ (wrap (unwrap (f (wrap work))) n c b d)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                      (wrap (unwrap (f (wrap work))) n b d c)))
[Done]

S a →
  (,,) ▲ ▲ ▲
       (let n = S a
        in (++) ▲ (f (wrap work) n d c b)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) (f (wrap work) n c b d)))
       (let n = S a
        in (++) ▲ (f (wrap work) n b d c)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) (f (wrap work) n d c b)))
       (let n = S a
        in (++) ▲ (f (wrap work) n c b d)
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) (f (wrap work) n b d c)))
[Done]

S a →
  (,,) ▲ ▲ ▲
       (let n = S a
        in (++) ▲
                (case n of wild ▲
                   Z → [] ▲
                   S n →
                     (++) ▲ (wrap work n d b c)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                (wrap work n b c d)))
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                      (case n of wild ▲
                         Z → [] ▲
                         S n →
                           (++) ▲ (wrap work n c d b)
                                ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                      (wrap work n d b c)))))
       (let n = S a
        in (++) ▲
                (case n of wild ▲
                   Z → [] ▲
                   S n →
                     (++) ▲ (wrap work n b c d)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                (wrap work n c d b)))
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                      (case n of wild ▲
                         Z → [] ▲
                         S n →
                           (++) ▲ (wrap work n d b c)
                                ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                      (wrap work n b c d)))))
       (let n = S a
        in (++) ▲
                (case n of wild ▲
                   Z → [] ▲
                   S n →
                     (++) ▲ (wrap work n c d b)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                (wrap work n d b c)))
                ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                      (case n of wild ▲
                         Z → [] ▲
                         S n →
                           (++) ▲ (wrap work n b c d)
                                ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                      (wrap work n c d b)))))
[Done]

S a →
  (,,) ▲ ▲ ▲
       ((++) ▲
             (case S a of wild ▲
                Z → [] ▲
                S n →
                  (++) ▲ (wrap work n d b c)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                             (wrap work n b c d)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   (case S a of wild ▲
                      Z → [] ▲
                      S n →
                        (++) ▲ (wrap work n c d b)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                   (wrap work n d b c)))))
       ((++) ▲
             (case S a of wild ▲
                Z → [] ▲
                S n →
                  (++) ▲ (wrap work n b c d)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                             (wrap work n c d b)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   (case S a of wild ▲
                      Z → [] ▲
                      S n →
                        (++) ▲ (wrap work n d b c)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                   (wrap work n b c d)))))
       ((++) ▲
             (case S a of wild ▲
                Z → [] ▲
                S n →
                  (++) ▲ (wrap work n c d b)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                             (wrap work n d b c)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   (case S a of wild ▲
                      Z → [] ▲
                      S n →
                        (++) ▲ (wrap work n b c d)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                   (wrap work n c d b)))))
[Done]

S a →
  (,,) ▲ ▲ ▲
       ((++) ▲
             ((++) ▲ (wrap work a d b c)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲)) (wrap work a b c d)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   ((++) ▲ (wrap work a c d b)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                               (wrap work a d b c)))))
       ((++) ▲
             ((++) ▲ (wrap work a b c d)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (wrap work a c d b)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   ((++) ▲ (wrap work a d b c)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                               (wrap work a b c d)))))
       ((++) ▲
             ((++) ▲ (wrap work a c d b)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (wrap work a d b c)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   ((++) ▲ (wrap work a b c d)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                               (wrap work a c d b)))))
[Done]

S a →
  (,,) ▲ ▲ ▲
       ((++) ▲
             ((++) ▲ (wrap (unwrap (f (wrap work))) a d b c)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                         (wrap (unwrap (f (wrap work))) a b c d)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   ((++) ▲ (wrap (unwrap (f (wrap work))) a c d b)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                               (wrap (unwrap (f (wrap work))) a d b c)))))
       ((++) ▲
             ((++) ▲ (wrap (unwrap (f (wrap work))) a b c d)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                         (wrap (unwrap (f (wrap work))) a c d b)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   ((++) ▲ (wrap (unwrap (f (wrap work))) a d b c)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                               (wrap (unwrap (f (wrap work))) a b c d)))))
       ((++) ▲
             ((++) ▲ (wrap (unwrap (f (wrap work))) a c d b)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                         (wrap (unwrap (f (wrap work))) a d b c)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   ((++) ▲ (wrap (unwrap (f (wrap work))) a b c d)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                               (wrap (unwrap (f (wrap work))) a c d b)))))
[Done]

S a →
  (,,) ▲ ▲ ▲
       ((++) ▲
             ((++) ▲ (f (wrap work) a d b c)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                         (f (wrap work) a b c d)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   ((++) ▲ (f (wrap work) a c d b)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                               (f (wrap work) a d b c)))))
       ((++) ▲
             ((++) ▲ (f (wrap work) a b c d)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                         (f (wrap work) a c d b)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   ((++) ▲ (f (wrap work) a d b c)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                               (f (wrap work) a b c d)))))
       ((++) ▲
             ((++) ▲ (f (wrap work) a c d b)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                         (f (wrap work) a d b c)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   ((++) ▲ (f (wrap work) a b c d)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                               (f (wrap work) a c d b)))))
[Done]

S a →
  (,,) ▲ ▲ ▲
       ((++) ▲
             ((++) ▲ (f (wrap work) a d b c)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                         (f (wrap work) a b c d)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                   ((++) ▲ (f (wrap work) a c d b)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                               (f (wrap work) a d b c)))))
       ((++) ▲
             ((++) ▲ (f (wrap work) a b c d)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                         (f (wrap work) a c d b)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                   ((++) ▲ (f (wrap work) a d b c)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                               (f (wrap work) a b c d)))))
       ((++) ▲
             ((++) ▲ (f (wrap work) a c d b)
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                         (f (wrap work) a d b c)))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                   ((++) ▲ (f (wrap work) a b c d)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                               (f (wrap work) a c d b)))))
[Done]

(,,) ▲ ▲ ▲
     ((++) ▲
           ((++) ▲ (f (wrap work) a d b c)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲)) (f (wrap work) a b c d)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                 ((++) ▲ (f (wrap work) a c d b)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                             (f (wrap work) a d b c)))))
     ((++) ▲
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                 ((++) ▲ (f (wrap work) a d b c)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                             (f (wrap work) a b c d)))))
     ((++) ▲
           ((++) ▲ (f (wrap work) a c d b)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                 ((++) ▲ (f (wrap work) a b c d)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                             (f (wrap work) a c d b)))))
[Done]

(,,) ▲ ▲ ▲
     ((++) ▲
           ((++) ▲ (f (wrap work) a d b c)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲)) (f (wrap work) a b c d)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                 ((++) ▲ (f (wrap work) a c d b)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                             (f (wrap work) a d b c)))))
     ((++) ▲
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                 ((++) ▲ (f (wrap work) a d b c)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                             (f (wrap work) a b c d)))))
     ((++) ▲
           ((++) ▲ (f (wrap work) a c d b)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                 ((++) ▲ (f (wrap work) a b c d)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                             (f (wrap work) a c d b)))))
[Done]

(++) ▲
     ((++) ▲ (f (wrap work) a c d b)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c)))
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b))))
[Done]

(++) ▲
     ((++) ▲ (f (wrap work) a c d b)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c)))
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b))))
[Done]

(++) ▲ (f (wrap work) a c d b)
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c))
[Done]

(++) ▲ (f (wrap work) a c d b)
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c))
[Done]

f (wrap work) a c d b
[Done]

let u = f (wrap work) a c d b in u
[Done]

(++) ▲ (let u = f (wrap work) a c d b in u)
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c))
[Done]

(++) ▲ (let u = f (wrap work) a c d b in u)
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c))
[Done]

(++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) (f (wrap work) a d b c)
[Done]

f (wrap work) a d b c
[Done]

let v = f (wrap work) a d b c in v
[Done]

(++) ▲ (let u = f (wrap work) a c d b in u)
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
           (let v = f (wrap work) a d b c in v))
[Done]

(++) ▲
     ((++) ▲ (let u = f (wrap work) a c d b in u)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                 (let v = f (wrap work) a d b c in v)))
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b))))
[Done]

(++) ▲
     ((++) ▲ (let u = f (wrap work) a c d b in u)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                 (let v = f (wrap work) a d b c in v)))
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b))))
[Done]

(++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
     ((++) ▲ (f (wrap work) a b c d)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b)))
[Done]

(++) ▲ (f (wrap work) a b c d)
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b))
[Done]

f (wrap work) a b c d
[Done]

let w = f (wrap work) a b c d in w
[Done]

(++) ▲
     ((++) ▲ (let u = f (wrap work) a c d b in u)
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                 (let v = f (wrap work) a d b c in v)))
     ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
           ((++) ▲ (let w = f (wrap work) a b c d in w)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b))))
[Done]

(,,) ▲ ▲ ▲
     ((++) ▲
           ((++) ▲ (f (wrap work) a d b c)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲)) (f (wrap work) a b c d)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                 ((++) ▲ (f (wrap work) a c d b)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                             (f (wrap work) a d b c)))))
     ((++) ▲
           ((++) ▲ (f (wrap work) a b c d)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) (f (wrap work) a c d b)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                 ((++) ▲ (f (wrap work) a d b c)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                             (f (wrap work) a b c d)))))
     ((++) ▲
           ((++) ▲ (let u = f (wrap work) a c d b in u)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                       (let v = f (wrap work) a d b c in v)))
           ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                 ((++) ▲ (let w = f (wrap work) a b c d in w)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                             (f (wrap work) a c d b)))))
[Done]

let w = f (wrap work) a b c d
    v = f (wrap work) a d b c
    u = f (wrap work) a c d b
in (,,) ▲ ▲ ▲
        ((++) ▲
              ((++) ▲ (f (wrap work) a d b c)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                          (f (wrap work) a b c d)))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                    ((++) ▲ (f (wrap work) a c d b)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                (f (wrap work) a d b c)))))
        ((++) ▲
              ((++) ▲ (f (wrap work) a b c d)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                          (f (wrap work) a c d b)))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                    ((++) ▲ (f (wrap work) a d b c)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                (f (wrap work) a b c d)))))
        ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                    ((++) ▲ w
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                (f (wrap work) a c d b)))))
[Done]

let u = f (wrap work) a c d b
    v = f (wrap work) a d b c
    w = f (wrap work) a b c d
in (,,) ▲ ▲ ▲
        ((++) ▲
              ((++) ▲ (f (wrap work) a d b c)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                          (f (wrap work) a b c d)))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                    ((++) ▲ (f (wrap work) a c d b)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                (f (wrap work) a d b c)))))
        ((++) ▲
              ((++) ▲ (f (wrap work) a b c d)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                          (f (wrap work) a c d b)))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                    ((++) ▲ (f (wrap work) a d b c)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                (f (wrap work) a b c d)))))
        ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                    ((++) ▲ w
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                (f (wrap work) a c d b)))))
[Done]

let u = f (wrap work) a c d b
    v = f (wrap work) a d b c
    w = f (wrap work) a b c d
in (,,) ▲ ▲ ▲
        ((++) ▲
              ((++) ▲ (f (wrap work) a d b c)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                          (f (wrap work) a b c d)))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                    ((++) ▲ u
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                (f (wrap work) a d b c)))))
        ((++) ▲
              ((++) ▲ (f (wrap work) a b c d)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                    ((++) ▲ (f (wrap work) a d b c)
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                (f (wrap work) a b c d)))))
        ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                    ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

let u = f (wrap work) a c d b
    v = f (wrap work) a d b c
    w = f (wrap work) a b c d
in (,,) ▲ ▲ ▲
        ((++) ▲
              ((++) ▲ v
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                          (f (wrap work) a b c d)))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                    ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
        ((++) ▲
              ((++) ▲ (f (wrap work) a b c d)
                    ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                    ((++) ▲ v
                          ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                (f (wrap work) a b c d)))))
        ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
              ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                    ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

case (,,) ▲ ▲ ▲ (f (wrap work) a c d b) (f (wrap work) a d b c)
          (f (wrap work) a b c d)
 of uvw ▲
  (,,) u v w →
    (,,) ▲ ▲ ▲
         ((++) ▲
               ((++) ▲ v
                     ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                           (f (wrap work) a b c d)))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                     ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
         ((++) ▲
               ((++) ▲ (f (wrap work) a b c d)
                     ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                     ((++) ▲ v
                           ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                 (f (wrap work) a b c d)))))
         ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                     ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

case unwrap (f (wrap work)) a c d b of uvw ▲
  (,,) u v w →
    (,,) ▲ ▲ ▲
         ((++) ▲
               ((++) ▲ v
                     ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                           (f (wrap work) a b c d)))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                     ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
         ((++) ▲
               ((++) ▲ (f (wrap work) a b c d)
                     ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                     ((++) ▲ v
                           ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                 (f (wrap work) a b c d)))))
         ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                     ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

case work a c d b of uvw ▲
  (,,) u v w →
    (,,) ▲ ▲ ▲
         ((++) ▲
               ((++) ▲ v
                     ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                           (f (wrap work) a b c d)))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                     ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
         ((++) ▲
               ((++) ▲ (f (wrap work) a b c d)
                     ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                     ((++) ▲ v
                           ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                 (f (wrap work) a b c d)))))
         ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
               ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                     ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

S a →
  case work a c d b of uvw ▲
    (,,) u v w →
      (,,) ▲ ▲ ▲
           ((++) ▲
                 ((++) ▲ v
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                             (f (wrap work) a b c d)))
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                       ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
           ((++) ▲
                 ((++) ▲ (f (wrap work) a b c d)
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                       ((++) ▲ v
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                   (f (wrap work) a b c d)))))
           ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                       ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

case a of w ▲
  Z →
    (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
  S a →
    case work a c d b of uvw ▲
      (,,) u v w →
        (,,) ▲ ▲ ▲
             ((++) ▲
                   ((++) ▲ v
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                               (f (wrap work) a b c d)))
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                         ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
             ((++) ▲
                   ((++) ▲ (f (wrap work) a b c d)
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                         ((++) ▲ v
                               ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                     (f (wrap work) a b c d)))))
             ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                         ((++) ▲ w ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

case n of w ▲
  Z → (,,) ▲ ▲ ▲ ([] ▲) ([] ▲) ([] ▲)
  S a →
    case a of w ▲
      Z →
        (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
             ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
      S a →
        case work a c d b of uvw ▲
          (,,) u v w →
            (,,) ▲ ▲ ▲
                 ((++) ▲
                       ((++) ▲ v
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                   (f (wrap work) a b c d)))
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                             ((++) ▲ u
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))))
                 ((++) ▲
                       ((++) ▲ (f (wrap work) a b c d)
                             ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                             ((++) ▲ v
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                         (f (wrap work) a b c d)))))
                 ((++) ▲ ((++) ▲ u ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲)) v))
                       ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                             ((++) ▲ w
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲)) u))))
[Done]

hanoi =
  let f = λ hanoi ds ds ds ds →
        case ds of wild ▲
          Z → [] ▲
          S n →
            (++) ▲ (hanoi n ds ds ds)
                 ((++) ▲ ((:) ▲ ((,) ▲ ▲ ds ds) ([] ▲)) (hanoi n ds ds ds))
      rec work = λ n d b c →
            case n of w ▲
              Z → (,,) ▲ ▲ ▲ ([] ▲) ([] ▲) ([] ▲)
              S a →
                case a of w ▲
                  Z →
                    (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
                  S a →
                    case work a c d b of uvw ▲
                      (,,) u v w →
                        (,,) ▲ ▲ ▲
                             ((++) ▲
                                   ((++) ▲ v
                                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                               (f (wrap work) a b c d)))
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                                         ((++) ▲ u
                                               ((++) ▲
                                                     ((:) ▲ ((,) ▲ ▲ c b)
                                                          ([] ▲))
                                                     v))))
                             ((++) ▲
                                   ((++) ▲ (f (wrap work) a b c d)
                                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                               u))
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                                         ((++) ▲ v
                                               ((++) ▲
                                                     ((:) ▲ ((,) ▲ ▲ d c)
                                                          ([] ▲))
                                                     (f (wrap work) a b c d)))))
                             ((++) ▲
                                   ((++) ▲ u
                                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                               v))
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                                         ((++) ▲ w
                                               ((++) ▲
                                                     ((:) ▲ ((,) ▲ ▲ b d)
                                                          ([] ▲))
                                                     u))))
  in wrap work
[Done]

hanoi =
  let rec work = λ n d b c →
            case n of w ▲
              Z → (,,) ▲ ▲ ▲ ([] ▲) ([] ▲) ([] ▲)
              S a →
                case a of w ▲
                  Z →
                    (,,) ▲ ▲ ▲ ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲)) ([] ▲))
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲)) ([] ▲))
                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲)) ([] ▲))
                  S a →
                    case work a c d b of uvw ▲
                      (,,) u v w →
                        (,,) ▲ ▲ ▲
                             ((++) ▲
                                   ((++) ▲ v
                                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ d c) ([] ▲))
                                               ((λ hanoi ds ds ds ds →
                                                   case ds of wild ▲
                                                     Z → [] ▲
                                                     S n →
                                                       (++) ▲ (hanoi n ds ds ds)
                                                            ((++) ▲
                                                                  ((:) ▲
                                                                       ((,) ▲ ▲
                                                                            ds
                                                                            ds)
                                                                       ([] ▲))
                                                                  (hanoi n ds ds
                                                                         ds))) (wrap work)
                                                                               a
                                                                               b
                                                                               c
                                                                               d)))
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ d b) ([] ▲))
                                         ((++) ▲ u
                                               ((++) ▲
                                                     ((:) ▲ ((,) ▲ ▲ c b)
                                                          ([] ▲))
                                                     v))))
                             ((++) ▲
                                   ((++) ▲
                                         ((λ hanoi ds ds ds ds →
                                             case ds of wild ▲
                                               Z → [] ▲
                                               S n →
                                                 (++) ▲ (hanoi n ds ds ds)
                                                      ((++) ▲
                                                            ((:) ▲
                                                                 ((,) ▲ ▲ ds ds)
                                                                 ([] ▲))
                                                            (hanoi n ds ds
                                                                   ds))) (wrap work)
                                                                         a b c
                                                                         d)
                                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ b d) ([] ▲))
                                               u))
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ b c) ([] ▲))
                                         ((++) ▲ v
                                               ((++) ▲
                                                     ((:) ▲ ((,) ▲ ▲ d c)
                                                          ([] ▲))
                                                     ((λ hanoi ds ds ds ds →
                                                         case ds of wild ▲
                                                           Z → [] ▲
                                                           S n →
                                                             (++) ▲
                                                                  (hanoi n ds ds
                                                                         ds)
                                                                  ((++) ▲
                                                                        ((:) ▲
                                                                             ((,) ▲
                                                                                  ▲
                                                                                  ds
                                                                                  ds)
                                                                             ([] ▲))
                                                                        (hanoi n
                                                                               ds
                                                                               ds
                                                                               ds))) (wrap work)
                                                                                     a
                                                                                     b
                                                                                     c
                                                                                     d)))))
                             ((++) ▲
                                   ((++) ▲ u
                                         ((++) ▲ ((:) ▲ ((,) ▲ ▲ c b) ([] ▲))
                                               v))
                                   ((++) ▲ ((:) ▲ ((,) ▲ ▲ c d) ([] ▲))
                                         ((++) ▲ w
                                               ((++) ▲
                                                     ((:) ▲ ((,) ▲ ▲ b d)
                                                          ([] ▲))
                                                     u))))
  in wrap work
[Done]

HERMIT> 
[Done]

Leaving GHCi.
ghc: user interrupt
Linking Hanoi ...
[starting HERMIT-shell v0.1.0.0 on Hanoi.hs]
[starting HERMIT v1.0.0.0 on Hanoi.hs]
% ghc Hanoi.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=HERMIT.GHCI -fplugin-opt=HERMIT.GHCI:Main: -fplugin-opt=HERMIT.GHCI:Main:HanoiScript.hs -fplugin-opt=HERMIT.GHCI:Main:resume
