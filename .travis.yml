# This file has been generated -- see https://github.com/hvr/multi-ghc-travis
language: c
sudo: false

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

matrix:
  include:
    - env: CABALVER=1.22 GHCVER=7.10.3
      compiler: ": #GHC 7.10.3"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.3], sources: [hvr-ghc]}}
    - env: CABALVER=head GHCVER=head
      compiler: ": #GHC head"
      addons: {apt: {packages: [cabal-install-head,ghc-head], sources: [hvr-ghc]}}

  allow_failures:
    - env: CABALVER=head GHCVER=head

before_install:
 - unset CC
 - export PATH=$HOME/.cabal/bin:/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - git clone https://github.com/ku-fpg/remote-json.git
 - git clone https://github.com/ku-fpg/hermit.git

# check whether current requested install-plan matches cached package-db snapshot
# for now, fail the cache hit, because we need a local version of hermit, etcv
 - rm -rf $HOME/.cabsnap;
 - mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
 - cabal install -j --reinstall remote-json/ remote-json/remote-json-server/ remote-json/remote-json-client/ hermit/ --only-dependencies --enable-tests --enable-benchmarks;
 - cabal install remote-json/ remote-json/remote-json-server/ remote-json/remote-json-client/ hermit/ 

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build -j1 # this builds all libraries and executables (including tests/benchmarks)
 - cabal test -j1 --show-details=always
 - cabal check
 - cabal sdist   # tests that a source-distribution can be generated
 - cabal install

# EOF
