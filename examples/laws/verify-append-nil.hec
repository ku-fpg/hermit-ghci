--------------------------------------------
-- Verify append-nil
--
-- forall xs.  xs ++ [] = xs
--
--------------------------------------------

-- To test this script:
--   prog-end
--   load-and-run "verify-append-nil.hec"
--   show-lemmas

rule-to-lemma "append-nil"

-- first do the proof interactively
--
-- rule-lhs-intro "append-nil"
-- consider lam ; lams-body
-- case-split-inline 'xs
-- {case-alt 0
--    one-bu (inline '++);  smash
-- }
-- {case-alt 1
--    one-bu (inline '++);  smash
--    one-bu (forward ind-hyp-0)
-- }

-- then encode the proof as a rewrite or script
define-script "append-nil-nil" "one-bu (inline '++); smash"
define-script "append-nil-cons" "one-bu (inline '++); smash; one-bu (forward ind-hyp-0)"

--verify-lemma "append-nil" (inductive-proof 'xs [ '"[]" , ': ] [ append-nil-nil , append-nil-cons ] )

prove-lemma "append-nil"
induction 'xs
forall-body
{ conj-lhs                                      -- undefined case
  one-bu (inline '++) ; smash
}

{ [conj-rhs, conj-lhs]                          -- nil case
  one-bu (inline '++) ; smash
}

{ [conj-rhs, conj-rhs, forall-body, consequent] -- cons case
  -- XXX: Is it ok that we don't need to do anything with the antecedent here?
  
  one-bu (inline '++) ; smash
  one-bu (lemma-forward ind-hyp-0)
  reflexivity
}
end-proof

